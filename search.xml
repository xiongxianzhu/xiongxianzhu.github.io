<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>配置docker国内镜像源加速获取docker镜像</title>
      <link href="2021/03/10/docker-registry-mirrors-config/"/>
      <url>2021/03/10/docker-registry-mirrors-config/</url>
      
        <content type="html"><![CDATA[<h4 id="1-docker国内镜像源"><a href="#1-docker国内镜像源" class="headerlink" title="1. docker国内镜像源"></a>1. docker国内镜像源</h4><p>Docker 官方中国区</p><pre class="line-numbers language-none"><code class="language-none">https://registry.docker-cn.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网易</p><pre class="line-numbers language-none"><code class="language-none">http://hub-mirror.c.163.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中国科技大学</p><pre class="line-numbers language-none"><code class="language-none">https://docker.mirrors.ustc.edu.cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>阿里云</p><pre class="line-numbers language-none"><code class="language-none">https://&lt;阿里云给你分配的随机码&gt;.mirror.aliyuncs.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>七牛云</p><pre class="line-numbers language-none"><code class="language-none">https://reg-mirror.qiniu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-配置docker镜像源为阿里源"><a href="#2-配置docker镜像源为阿里源" class="headerlink" title="2. 配置docker镜像源为阿里源"></a>2. 配置docker镜像源为阿里源</h4><p>配置镜像源为国内源可以提升获取Docker官方镜像的速度。</p><p>获取阿里云的docker源：</p><p>登录你的阿里云控制台–容器镜像服务–镜像中心–镜像加速器</p><p>获取加速器地址：</p><pre class="line-numbers language-none"><code class="language-none">https://&lt;阿里云给你分配的随机码&gt;.mirror.aliyuncs.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mkdir -p /etc/docker/vim /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>daemon.json文件内容：</p><pre class="line-numbers language-none"><code class="language-none">{    "registry-mirrors": [        "https://&lt;阿里云给你分配的随机码&gt;.mirror.aliyuncs.com"    ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-none"><code class="language-none">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["https://&lt;阿里云给你分配的随机码&gt;.mirror.aliyuncs.com"]}EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-重启docker服务生效"><a href="#3-重启docker服务生效" class="headerlink" title="3. 重启docker服务生效"></a>3. 重启docker服务生效</h4><p>重启docker服务使配置生效：</p><pre class="line-numbers language-none"><code class="language-none">systemctl daemon-reloadsystemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-检测"><a href="#4-检测" class="headerlink" title="4. 检测"></a>4. 检测</h4><pre class="line-numbers language-none"><code class="language-none">docker info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看<code>Registry Mirrors</code>是否配置成功。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gitlab-ce搭建git服务</title>
      <link href="2021/03/10/using-gitlab-ce-to-build-git-service/"/>
      <url>2021/03/10/using-gitlab-ce-to-build-git-service/</url>
      
        <content type="html"><![CDATA[<h1 id="使用gitlab-ce搭建git服务"><a href="#使用gitlab-ce搭建git服务" class="headerlink" title="使用gitlab-ce搭建git服务"></a>使用gitlab-ce搭建git服务</h1><p>使用docker安装gitlab</p><p><a href="https://docs.gitlab.com/omnibus/docker/">https://docs.gitlab.com/omnibus/docker/</a></p><p><a href="https://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose">https://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose</a></p><p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><p>Gitlab-ce与Gitlab-ee的区别在于： </p><ul><li>gitlab-ce: 社区版</li><li>gitlab-ee: 企业收费版</li></ul><h4 id="1-下载gitlab-ce的docker镜像"><a href="#1-下载gitlab-ce的docker镜像" class="headerlink" title="1. 下载gitlab-ce的docker镜像"></a>1. 下载gitlab-ce的docker镜像</h4><p>下载当前最新版本， 最好指明版本号， 如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull gitlab/gitlab-ce:13.9.1-ce.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-采用docker-compose安装gitlab-ce"><a href="#2-采用docker-compose安装gitlab-ce" class="headerlink" title="2. 采用docker compose安装gitlab-ce"></a>2. 采用docker compose安装gitlab-ce</h4><p>配置环境变量<code>GITLAB_HOME</code>:</p><pre class="line-numbers language-none"><code class="language-none">vim ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>追回内容：</p><pre class="line-numbers language-none"><code class="language-none">export GITLAB_HOME=/Users/xx/gitlab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使环境变量生效：</p><pre class="line-numbers language-none"><code class="language-none">source ~/.bash_profileor # 如果~/.zshrc里配置了source ~/.bash_profilesource ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建目录：</p><pre class="line-numbers language-none"><code class="language-none">mkdir -p $GITLAB_HOME/configmkdir -p $GITLAB_HOME/logsmkdir -p $GITLAB_HOME/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>docker-compose.yml</code>文件内容：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">version: '3'services:  gitlab:    image: gitlab/gitlab-ce:13.9.1-ce.0    restart: always    hostname: gitlab.example.com    environment:      GITLAB_OMNIBUS_CONFIG: |        external_url 'https://gitlab.example.com'        # Add any other gitlab.rb configuration here, each on its own line    ports:      - '80:80'      - '443:443'      - '22:22'    volumes:      - '$GITLAB_HOME/config:/etc/gitlab'      - '$GITLAB_HOME/logs:/var/log/gitlab'      - '$GITLAB_HOME/data:/var/opt/gitlab'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本机测试示例：</p><pre class="line-numbers language-none"><code class="language-none">version: '3'services:  gitlab:    image: gitlab/gitlab-ce:13.9.1-ce.0    container_name: gitlab    restart: always    hostname: gitlab.zhuxiongxian.com    # hostname: gitlab.example.com    environment:      TZ: 'Asia/Shanghai'      GITLAB_OMNIBUS_CONFIG: |        external_url 'https://gitlab.zhuxiongxian.com'        # gitlab_rails['gitlab_shell_ssh_port'] = 10222        gitlab_rails['time_zone'] = 'Asia/Shanghai'        # gitlab_rails['time_zone'] = 'PRC'        # gitlab_rails['gitlab_email_enabled'] = true        # gitlab_rails['gitlab_email_from'] = 'gitlab-no-reply@example.com'        # gitlab_rails['gitlab_email_display_name'] = 'GitLab Administrator'        # gitlab_rails['gitlab_email_reply_to'] = 'admin@example.com'        gitlab_rails['backup_keep_time'] = 14515200        # gitlab_rails['smtp_enable'] = true        # gitlab_rails['smtp_address'] = "smtp.example.com"        # gitlab_rails['smtp_port'] = 587        # gitlab_rails['smtp_user_name'] = "no-reply@example.com"        # gitlab_rails['smtp_password'] = "changeMeToSomethingGood"        # gitlab_rails['smtp_domain'] = "example.com"        # gitlab_rails['smtp_authentication'] = "login"        # gitlab_rails['smtp_enable_starttls_auto'] = true        # gitlab_rails['smtp_tls'] = true        unicorn['worker_timeout'] = 60        unicorn['worker_processes'] = 2        sidekiq['concurrency'] = 4        logrotate['enable'] = true        # logging['logrotate_frequency'] = "weekly"        # logging['logrotate_rotate'] = 52        logging['logrotate_frequency'] = "daily"        logging['logrotate_rotate'] = 30        logging['logrotate_compress'] = "compress"        logging['logrotate_method'] = "copytruncate"        logging['logrotate_delaycompress'] = "delaycompress"        nginx['enable'] = true        nginx['listen_port'] = 443        nginx['redirect_http_to_https'] = true        # nginx['ssl_certificate'] = "/etc/ssl/certs/gitlab/server-cert.pem"        # nginx['ssl_certificate_key'] = "/etc/ssl/certs/gitlab/server-key.pem"        nginx['ssl_protocols'] = "TLSv1.1 TLSv1.2"        nginx['logrotate_frequency'] = "weekly"        nginx['logrotate_rotate'] = 52        nginx['logrotate_compress'] = "compress"        nginx['logrotate_method'] = "copytruncate"        nginx['logrotate_delaycompress'] = "delaycompress"        letsencrypt['enable'] = false        # Add any other gitlab.rb configuration here, each on its own line    # deploy:    #   resources:    #     limits:    #       cpus: '0.1'    #       memory: 1g    #     reservations:    #       cpus: '0.0001'    #       memory: 20M    ports:      - '80:80'      - '443:443'      - '22:22'    volumes:      - '$GITLAB_HOME/config:/etc/gitlab'      - '$GITLAB_HOME/logs:/var/log/gitlab'      - '$GITLAB_HOME/data:/var/opt/gitlab'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-访问"><a href="#3-访问" class="headerlink" title="3. 访问"></a>3. 访问</h4><p>访问<code>external_url</code>配置的地址： <a href="https://gitlab.zhuxiongxian.com/">https://gitlab.zhuxiongxian.com</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> git </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于docker环境搭建ELK日志分析系统</title>
      <link href="2021/03/02/docker-elk/"/>
      <url>2021/03/02/docker-elk/</url>
      
        <content type="html"><![CDATA[<h4 id="1-架构"><a href="#1-架构" class="headerlink" title="1. 架构"></a>1. 架构</h4><p>日志统计分析系统采用架构：</p><pre class="line-numbers language-none"><code class="language-none">﻿docker + kibana + logstash + elasticsearch + kafka + zookeeper + filebeat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-下载docker镜像"><a href="#2-下载docker镜像" class="headerlink" title="2. 下载docker镜像"></a>2. 下载docker镜像</h4><p><a href="https://www.elastic.co/guide/index.html">https://www.elastic.co/guide/index.html</a><br><a href="https://www.elastic.co/guide/en/kibana/current/docker.html">https://www.elastic.co/guide/en/kibana/current/docker.html</a><br><a href="https://www.elastic.co/guide/cn/kibana/current/docker.html">https://www.elastic.co/guide/cn/kibana/current/docker.html</a><br><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-installation-configuration.html">https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-installation-configuration.html</a></p><pre class="line-numbers language-none"><code class="language-none">docker pull kibana:7.10.1docker pull logstash:7.10.1docker pull elasticsearch:7.10.1docker pull confluentinc/cp-kafka:6.0.2docker pull confluentinc/cp-zookeeper:6.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-默认端口"><a href="#3-默认端口" class="headerlink" title="3. 默认端口"></a>3. 默认端口</h4><ul><li>kibana端口： 5601</li><li>logstash端口： 5044</li><li>elasticsearch端口： 9200</li><li>kafka端口： 9092</li><li>zookeeper端口： 2181</li></ul><h4 id="4-docker-compose-yml"><a href="#4-docker-compose-yml" class="headerlink" title="4. docker-compose.yml"></a>4. docker-compose.yml</h4><p>创建目录：</p><pre class="line-numbers language-none"><code class="language-none">mkdir -p /Users/xx/elk/elasticsearch/datamkdir -p /Users/xx/elk/elasticsearch/pluginsmkdir -p /Users/xx/elk/logstash/pipelinemkdir -p /Users/xx/elk/logstash/patterns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>docker-compose.yml文件内容：</p><pre class="line-numbers language-none"><code class="language-none">version: '3'services:  kibana:    image: kibana:7.10.1    container_name: kibana    hostname: kibana    restart: always    links:      - elasticsearch    depends_on:      - elasticsearch    ports:      - 5601:5601    environment:      TZ: Asia/Shanghai      # - elasticsearch.hosts=http://elasticsearch:9200      # - I18N_LOCALE=zh-CN      # - XPACK_GRAPH_ENABLED=true      # - TIMELION_ENABLED=true      # - XPACK_MONITORING_COLLECTION_ENABLED="true"      # SERVER_NAME: kibana      # SERVER_HOST: 0.0.0.0      ELASTICSEARCH_HOSTS: http://elasticsearch:9200      SERVER_NAME: localhost      SERVER_HOST: 0.0.0.0      ELASTICSEARCH_URL: http://elasticsearch:9200/      I18N_LOCALE: zh-CN      XPACK_SECURITY_ENABLED: 'false'      MONITORING_ENABLED: 'true'    # volumes:    #   - /Users/xx/elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml    # networks:    #   - default  logstash:    image: logstash:7.10.1    container_name: logstash    hostname: logstash    restart: always    depends_on:      - elasticsearch    ports:      - 5044:5044    links:      - elasticsearch      - kafka    environment:      TZ: Asia/Shanghai    volumes:      - /Users/xx/elk/logstash/pipeline:/usr/share/logstash/pipeline      - /Users/xx/elk/logstash/patterns:/usr/share/logstash/patterns    # networks:    #   - default  elasticsearch:    image: elasticsearch:7.10.1    container_name: elasticsearch    hostname: elasticsearch    restart: always    ulimits:      memlock:        soft: -1        hard: -1    environment:      TZ: Asia/Shanghai      bootstrap.memory_lock: 'true'      cluster.name: docker-elk-cluster      discovery.type: single-node      xpack.security.enabled: 'false'      ES_JAVA_OPTS: '-Xms512M -Xmx512M'      http.cors.enabled: 'true'      http.cors.allow-origin: '*'      network.bind_host: 0.0.0.0      # - bootstrap.memory_lock=true      # - cluster.name=docker-elk-cluster      # - discovery.type=single-node      # - xpack.security.enabled=false      # - "ES_JAVA_OPTS=-Xms512M -Xmx512M"      # - "ES_JAVA_OPTS=-Xms1g -Xmx1g"      # - http.cors.enabled=true      # - http.cors.allow-origin=*      # ES_JAVA_OPTS: "-Xms2g -Xmx2g"      # discovery.type: single-node    ports:      - 9200:9200    volumes:      - /Users/xx/elk/elasticsearch/data:/usr/share/elasticsearch/data      - /Users/xx/elk/elasticsearch/plugins:/usr/share/elasticsearch/plugins    # networks:    #   - default  kafka:    image: confluentinc/cp-kafka:6.0.2    container_name: kafka    hostname: kafka    restart: always    depends_on:      - zookeeper    links:      - zookeeper    ports:      - 9092:9092    environment:      TZ: Asia/Shanghai      KAFKA_BROKER_ID: 1      KAFKA_LISTENERS: PLAINTEXT://:9092      KAFKA_ADVERTISED_HOST_NAME: kafka      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181      # KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1      KAFKA_HEAP_OPTS: "-Xmx512M -Xms16M"      # KAFKA_ADVERTISED_PORT: 9092      KAFKA_CREATE_TOPICS: "log:3:3"      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'    # volumes:    #   - /etc/timezone:/etc/timezone    #   - /etc/localtime:/etc/localtime    # networks:    #   - default  zookeeper:    image: confluentinc/cp-zookeeper:6.0.2    container_name: zookeeper    hostname: zookeeper    restart: always    ports:      - 2181:2181    environment:      TZ: Asia/Shanghai      ZOOKEEPER_CLIENT_PORT: 2181      ZOOKEEPER_TICK_TIME: 2000    # networks:    #   - defaultnetworks:  default:    driver: bridge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-一键构建"><a href="#5-一键构建" class="headerlink" title="5. 一键构建"></a>5. 一键构建</h4><p>后台启动，如果容器不存在根据镜像自动创建:</p><pre class="line-numbers language-none"><code class="language-none">docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止容器并删除容器:</p><pre class="line-numbers language-none"><code class="language-none">docker-compose down -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动集群容器，容器不存在就无法启动:</p><pre class="line-numbers language-none"><code class="language-none">docker-compose start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止集群容器:</p><pre class="line-numbers language-none"><code class="language-none">docker-compose stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启集群容器:</p><pre class="line-numbers language-none"><code class="language-none">docker-compose restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看集群容器状态:</p><pre class="line-numbers language-none"><code class="language-none">docker-compose ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看日志：</p><pre class="line-numbers language-none"><code class="language-none">docker-compose logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-访问"><a href="#6-访问" class="headerlink" title="6. 访问"></a>6. 访问</h4><p>kibana访问：<a href="http://127.0.0.1:5601/">http://127.0.0.1:5601</a></p><p>elasticsearch访问: <a href="http://127.0.0.1:9200/">http://127.0.0.1:9200</a></p><p><a href="http://localhost:9200/_nodes?pretty=true">http://localhost:9200/_nodes?pretty=true</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> elasticsearch </tag>
            
            <tag> ELK </tag>
            
            <tag> kibana </tag>
            
            <tag> logstash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql5.7安装密码校验插件validate_password</title>
      <link href="2021/02/28/mysql5-7-install-password-verification-plug-in-validate-password/"/>
      <url>2021/02/28/mysql5-7-install-password-verification-plug-in-validate-password/</url>
      
        <content type="html"><![CDATA[<h4 id="1-查看密码校验插件validate-password是否启用"><a href="#1-查看密码校验插件validate-password是否启用" class="headerlink" title="1. 查看密码校验插件validate_password是否启用"></a>1. 查看密码校验插件validate_password是否启用</h4><p>插件文件名称用</p><p>for linux or mac:</p><pre class="line-numbers language-none"><code class="language-none">validate_password.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>for windows:</p><pre class="line-numbers language-none"><code class="language-none">validate_password.dll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mysql命令连接mysql shell:</p><p>不使用ssl连接示例：</p><pre class="line-numbers language-none"><code class="language-none">mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用ssl连接示例：</p><pre class="line-numbers language-none"><code class="language-none">mysql -uroot -p --ssl-ca=/usr/local/mysql/data/ca-cert.pem --ssl-cert=/usr/local/mysql/data/client-cert.pem --ssl-key=/usr/local/mysql/data/client-key.pem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看所有插件及查看密码校验插件是否启用：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show plugins;mysql&gt; show variables like 'validate_password%';+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 8 || validate_password_mixed_case_count | 1 || validate_password_number_count | 1 || validate_password_policy | MEDIUM || validate_password_special_char_count | 1 |+--------------------------------------+--------+7 rows in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若插件列表没有<code>validate_password</code>及mysql环境变量没有以上信息， 则说明没有启用<code>validate_password</code>插件。</p><h4 id="2-查看mysql插件目录路径"><a href="#2-查看mysql插件目录路径" class="headerlink" title="2. 查看mysql插件目录路径"></a>2. 查看mysql插件目录路径</h4><p>查看插件目录路径：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show variables like 'plugin_dir';+---------------+------------------------------+| Variable_name | Value |+---------------+------------------------------+| plugin_dir | /usr/local/mysql/lib/plugin/ |+---------------+------------------------------+1 row in set (0.02 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可知我的mysql插件目录路径为<code>/usr/local/mysql/lib/plugin/</code></p><p>查看mysql插件目录下内容：</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/local/mysql/lib/plugin/ls -la<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现mysql密码校验插件<code>validate_password.so</code>， 显示插件是存在的， 只是尚未启用。</p><h4 id="3-启用密码校验插件validate-password"><a href="#3-启用密码校验插件validate-password" class="headerlink" title="3. 启用密码校验插件validate_password"></a>3. 启用密码校验插件validate_password</h4><p>修改mysql配置文件：</p><pre class="line-numbers language-none"><code class="language-none">vim /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>追回以下内容：</p><pre class="line-numbers language-none"><code class="language-none">[mysqld]plugin-load-add = validate_password.so# 服务器在启动时加载插件，并防止在服务器运行时删除插件。validate-password = FORCE_PLUS_PERMANENT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本人当前的<code>/etc/my.cnf</code>文件内容参考示例：</p><pre class="line-numbers language-none"><code class="language-none">[mysqld]character-set-client-handshake = FALSEcharacter-set-server = utf8mb4collation-server = utf8mb4_unicode_ciinit_connect = 'SET NAMES utf8mb4'ssl-ca = ca-cert.pemssl-cert = server-cert.pemssl-key = server-key.pemplugin-load-add = validate_password.so# 服务器在启动时加载插件，并防止在服务器运行时删除插件。validate-password = FORCE_PLUS_PERMANENT[mysql]default-character-set = utf8mb4[client]default-character-set = utf8mb4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改my.cnf后，重启mysql服务以使设置生效。<br>或者，要在运行时注册插件，可以使用以下语句(根据系统需要调整.so或.dll后缀):</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; INSTALL PLUGIN validate_password SONAME 'validate_password.so';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-查看mysql密码校验插件validate-password状态"><a href="#4-查看mysql密码校验插件validate-password状态" class="headerlink" title="4. 查看mysql密码校验插件validate_password状态"></a>4. 查看mysql密码校验插件validate_password状态</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show plugins;mysql&gt; show variables like 'validate_password%';+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 8 || validate_password_mixed_case_count | 1 || validate_password_number_count | 1 || validate_password_policy | MEDIUM || validate_password_special_char_count | 1 |+--------------------------------------+--------+7 rows in set (0.01 sec)mysql&gt; SHOW STATUS LIKE 'validate_password%';+-----------------------------------------------+---------------------+| Variable_name | Value |+-----------------------------------------------+---------------------+| validate_password_dictionary_file_last_parsed | 2021-02-28 05:49:23 || validate_password_dictionary_file_words_count | 0 |+-----------------------------------------------+---------------------+2 rows in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-测试密码校验策略"><a href="#5-测试密码校验策略" class="headerlink" title="5. 测试密码校验策略"></a>5. 测试密码校验策略</h4><p>测试, (当前默认策略：validate_password_policy=MEDIUM):</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; create user test@'localhost' identified by '123456';ERROR 1819 (HY000): Your password does not satisfy the current policy requirementsmysql&gt; create user test@'localhost' identified by 'Mysql_123456';Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>经检测发现， 对已存在账号的密码没有限制。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 插件 </tag>
            
            <tag> validate_password </tag>
            
            <tag> 密码 </tag>
            
            <tag> 复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker命令</title>
      <link href="2020/05/11/docker-commands/"/>
      <url>2020/05/11/docker-commands/</url>
      
        <content type="html"><![CDATA[<h4 id="1-docker信息"><a href="#1-docker信息" class="headerlink" title="1. docker信息"></a>1. docker信息</h4><pre class="line-numbers language-none"><code class="language-none">docker info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-docker-compose和machine版本信息"><a href="#2-docker-compose和machine版本信息" class="headerlink" title="2. docker, compose和machine版本信息"></a>2. docker, compose和machine版本信息</h4><pre class="line-numbers language-none"><code class="language-none">docker --versiondocker verisondocker-compose --versiondocker-machine --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-列出本地镜像"><a href="#3-列出本地镜像" class="headerlink" title="3. 列出本地镜像"></a>3. 列出本地镜像</h4><pre class="line-numbers language-none"><code class="language-none">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-列出所有正在运行的容器"><a href="#4-列出所有正在运行的容器" class="headerlink" title="4. 列出所有正在运行的容器"></a>4. 列出所有正在运行的容器</h4><pre class="line-numbers language-none"><code class="language-none">docker psordocker container ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-列出所有容器及显示容器大小"><a href="#5-列出所有容器及显示容器大小" class="headerlink" title="5. 列出所有容器及显示容器大小"></a>5. 列出所有容器及显示容器大小</h4><pre class="line-numbers language-none"><code class="language-none">docker ps -asordocker container ls -as<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数<code>-s</code>显示容器大小， <code>-a</code>显示所有容器</p><h4 id="6-列出所有容器"><a href="#6-列出所有容器" class="headerlink" title="6. 列出所有容器"></a>6. 列出所有容器</h4><pre class="line-numbers language-none"><code class="language-none">docker ps -aordocker container ls -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-进入一个正在运行的容器"><a href="#7-进入一个正在运行的容器" class="headerlink" title="7. 进入一个正在运行的容器"></a>7. 进入一个正在运行的容器</h4><pre class="line-numbers language-none"><code class="language-none">docker exec -it 容器名 /bin/shordocker exec -it 容器短UUID /bin/shordocker exec -it 容器长UUID /bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意， <code>/bin/sh</code>若找不到， 可替换为<code>/bin/bash</code>或<code>bash</code>或<code>sh</code>， 下同</p><h4 id="8-退出所在运行的容器"><a href="#8-退出所在运行的容器" class="headerlink" title="8. 退出所在运行的容器"></a>8. 退出所在运行的容器</h4><p><code>exit</code>命令即可退出</p><pre class="line-numbers language-none"><code class="language-none">/ # exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="9-运行docker-run-hello-world以测试从Docker-Hub中拉取图像并启动容器"><a href="#9-运行docker-run-hello-world以测试从Docker-Hub中拉取图像并启动容器" class="headerlink" title="9. 运行docker run hello-world以测试从Docker Hub中拉取图像并启动容器"></a>9. 运行docker run hello-world以测试从Docker Hub中拉取图像并启动容器</h4><pre class="line-numbers language-none"><code class="language-none">docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10-运行一个Ubuntu容器"><a href="#10-运行一个Ubuntu容器" class="headerlink" title="10. 运行一个Ubuntu容器"></a>10. 运行一个Ubuntu容器</h4><pre class="line-numbers language-none"><code class="language-none">docker run -it ubuntu bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11-通过镜像创建新容器"><a href="#11-通过镜像创建新容器" class="headerlink" title="11. 通过镜像创建新容器"></a>11. 通过镜像创建新容器</h4><p><code>docker run --name 容器名 镜像名</code></p><pre class="line-numbers language-none"><code class="language-none">docker run --name alpineappbase alpine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若容器已创建过， 则会报容器已存在的错误， 如：</p><pre class="line-numbers language-none"><code class="language-none">docker: Error response from daemon: Conflict. The container name "/alpineappbase" is already in use by container "7b32b8c559618c677f50ab793d70e4d08dda3499c3b13d82cb118aa1e6e91e1a". You have to remove (or rename) that container to be able to reuse that name.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="12-启动已创建的容器"><a href="#12-启动已创建的容器" class="headerlink" title="12. 启动已创建的容器"></a>12. 启动已创建的容器</h4><p><code>docker start 容器名/容器短UUID/容器长UUID</code></p><pre class="line-numbers language-none"><code class="language-none">docker start alpineappbaseordocker start 7b32b8c55961ordocker start 7b32b8c559618c677f50ab793d70e4d08dda3499c3b13d82cb118aa1e6e91e1a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-停止一个运行中的容器"><a href="#13-停止一个运行中的容器" class="headerlink" title="13. 停止一个运行中的容器"></a>13. 停止一个运行中的容器</h4><p><code>docker stop 容器名/容器短UUID/容器长UUID</code></p><pre class="line-numbers language-none"><code class="language-none">docker stop alpineappbaseordocker stop 7b32b8c55961ordocker stop 7b32b8c559618c677f50ab793d70e4d08dda3499c3b13d82cb118aa1e6e91e1a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中， <code>7b32b8c55961</code>是<code>docker ps</code>中的<code>CONTAINER ID</code>, 是短UUID， 对应的长UUID为<code>7b32b8c559618c677f50ab793d70e4d08dda3499c3b13d82cb118aa1e6e91e1a</code></p><h4 id="14-删除容器"><a href="#14-删除容器" class="headerlink" title="14. 删除容器"></a>14. 删除容器</h4><pre class="line-numbers language-none"><code class="language-none">docker rm 容器名/容器短UUID/容器长UUID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="15-从Docker-Hub中拉取或者更新指定镜像"><a href="#15-从Docker-Hub中拉取或者更新指定镜像" class="headerlink" title="15. 从Docker Hub中拉取或者更新指定镜像"></a>15. 从Docker Hub中拉取或者更新指定镜像</h4><pre class="line-numbers language-none"><code class="language-none">docker pull 镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="16-从Docker-Hub中搜索符合条件的镜像"><a href="#16-从Docker-Hub中搜索符合条件的镜像" class="headerlink" title="16. 从Docker Hub中搜索符合条件的镜像"></a>16. 从Docker Hub中搜索符合条件的镜像</h4><pre class="line-numbers language-none"><code class="language-none">docker search 镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="17-从本地移除一个或多个指定的镜像"><a href="#17-从本地移除一个或多个指定的镜像" class="headerlink" title="17. 从本地移除一个或多个指定的镜像"></a>17. 从本地移除一个或多个指定的镜像</h4><pre class="line-numbers language-none"><code class="language-none">docker rmi 镜像名1 镜像名2 ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-f</code>： 强行移除该镜像，即使其正被使用；<br><code>--no-prune</code>： 不移除该镜像的过程镜像，默认移除。</p><h4 id="18-查看容器内的进程"><a href="#18-查看容器内的进程" class="headerlink" title="18. 查看容器内的进程"></a>18. 查看容器内的进程</h4><pre class="line-numbers language-none"><code class="language-none">docker top 容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如： docker top ee40883460d7</p><p>其中PID是容器内进程在宿主机上的pid，ppid是容器内进程在宿主机上的父进程pid</p><h4 id="19-查看镜像或容器详情"><a href="#19-查看镜像或容器详情" class="headerlink" title="19. 查看镜像或容器详情"></a>19. 查看镜像或容器详情</h4><pre class="line-numbers language-none"><code class="language-none">docker inspect 镜像ID/容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker的安装</title>
      <link href="2020/05/11/installation-of-docker/"/>
      <url>2020/05/11/installation-of-docker/</url>
      
        <content type="html"><![CDATA[<h4 id="1-linux下安装docker"><a href="#1-linux下安装docker" class="headerlink" title="1. linux下安装docker"></a>1. linux下安装docker</h4><p><code>for centos</code>:</p><p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><p>卸载旧版本docker:</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用docker仓库进行安装:</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install -y yum-utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>官方源：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>阿里云docker源：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum-config-manager \    --add-repo \    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装<code>docker engine</code>:</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启docker服务：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>卸载<code>docker engine</code>：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum remove docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-mac下安装docker"><a href="#2-mac下安装docker" class="headerlink" title="2. mac下安装docker"></a>2. mac下安装docker</h4><h4 id="3-windwos下安装docker"><a href="#3-windwos下安装docker" class="headerlink" title="3. windwos下安装docker"></a>3. windwos下安装docker</h4>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决macos下安装m2crypto报SWIG的错</title>
      <link href="2020/03/06/install-m2crypto-on-macosx/"/>
      <url>2020/03/06/install-m2crypto-on-macosx/</url>
      
        <content type="html"><![CDATA[<h4 id="1-使用pipenv或pip在虚拟环境安装m2crypto报错"><a href="#1-使用pipenv或pip在虚拟环境安装m2crypto报错" class="headerlink" title="1. 使用pipenv或pip在虚拟环境安装m2crypto报错"></a>1. 使用pipenv或pip在虚拟环境安装m2crypto报错</h4><p>使用pipenv或pip在虚拟环境安装m2crypto报错， 报错内容如下：</p><pre class="line-numbers language-none"><code class="language-none">(env)$ pipenv install m2crypto       # 或： (env)$ pip install m2cryptoInstalling initially failed dependencies…[pipenv.exceptions.InstallError]:   File "/usr/local/lib/python3.7/site-packages/pipenv/core.py", line 1874, in do_install[pipenv.exceptions.InstallError]:       keep_outdated=keep_outdated[pipenv.exceptions.InstallError]:   File "/usr/local/lib/python3.7/site-packages/pipenv/core.py", line 1253, in do_init[pipenv.exceptions.InstallError]:       pypi_mirror=pypi_mirror,[pipenv.exceptions.InstallError]:   File "/usr/local/lib/python3.7/site-packages/pipenv/core.py", line 859, in do_install_dependencies[pipenv.exceptions.InstallError]:       retry_list, procs, failed_deps_queue, requirements_dir, **install_kwargs[pipenv.exceptions.InstallError]:   File "/usr/local/lib/python3.7/site-packages/pipenv/core.py", line 763, in batch_install[pipenv.exceptions.InstallError]:       _cleanup_procs(procs, not blocking, failed_deps_queue, retry=retry)[pipenv.exceptions.InstallError]:   File "/usr/local/lib/python3.7/site-packages/pipenv/core.py", line 681, in _cleanup_procs[pipenv.exceptions.InstallError]:       raise exceptions.InstallError(c.dep.name, extra=err_lines)[pipenv.exceptions.InstallError]: ['Looking in indexes: http://mirrors.aliyun.com/pypi/simple/', 'Collecting m2crypto==0.35.2', '  Downloading http://mirrors.aliyun.com/pypi/packages/74/18/3beedd4ac48b52d1a4d12f2a8c5cf0ae342ce974859fba838cbbc1580249/M2Crypto-0.35.2.tar.gz (1.1 MB)', 'Building wheels for collected packages: m2crypto', '  Building wheel for m2crypto (setup.py): started', "  Building wheel for m2crypto (setup.py): finished with status 'error'", '  Running setup.py clean for m2crypto', 'Failed to build m2crypto', 'Installing collected packages: m2crypto', '    Running setup.py install for m2crypto: started', "    Running setup.py install for m2crypto: finished with status 'error'"][pipenv.exceptions.InstallError]: ['ERROR: Command errored out with exit status 1:', '   command: /Users/xx/.local/share/virtualenvs/iHealth-WeChat-UB3mZpIa/bin/python -u -c \'import sys, setuptools, tokenize; sys.argv[0] = \'"\'"\'/private/var/folders/v8/hycw3b7x5vz3yv_lsxvg9fym0000gn/T/pip-install-06p4c1dw/m2crypto/setup.py\'"\'"\'; __file__=\'"\'"\'/private/var/folders/v8/hycw3b7x5vz3yv_lsxvg9fym0000gn/T/pip-install-06p4c1dw/m2crypto/setup.py\'"\'"\';f=getattr(tokenize, \'"\'"\'open\'"\'"\', open)(__file__);code=f.read().replace(\'"\'"\'\\r\\n\'"\'"\', \'"\'"\'\\n\'"\'"\');f.close();exec(compile(code, __file__, \'"\'"\'exec\'"\'"\'))\' bdist_wheel -d /private/var/folders/v8/hycw3b7x5vz3yv_lsxvg9fym0000gn/T/pip-wheel-vuqvb4mq', '       cwd: /private/var/folders/v8/hycw3b7x5vz3yv_lsxvg9fym0000gn/T/pip-install-06p4c1dw/m2crypto/', '  Complete output (55 lines):', '  running bdist_wheel', '  running build', '  running build_py', '  copying M2Crypto/callback.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/EVP.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/AuthCookie.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/m2.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/ftpslib.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/EC.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/httpslib.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/X509.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/util.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/RSA.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/BIO.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/DH.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/__init__.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/threading.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/Rand.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/SMIME.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/Engine.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/m2xmlrpclib.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/RC4.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/m2urllib2.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/DSA.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/six.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/m2urllib.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/BN.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/m2crypto.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/Err.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  copying M2Crypto/ASN1.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '  creating build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '  copying M2Crypto/SSL/cb.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '  copying M2Crypto/SSL/Session.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '  copying M2Crypto/SSL/timeout.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '  copying M2Crypto/SSL/__init__.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '  copying M2Crypto/SSL/TwistedProtocolWrapper.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '  copying M2Crypto/SSL/Cipher.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '  copying M2Crypto/SSL/Connection.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '  copying M2Crypto/SSL/Context.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '  copying M2Crypto/SSL/SSLServer.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '  copying M2Crypto/SSL/ssl_dispatcher.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '  copying M2Crypto/SSL/Checker.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '  warning: build_py: byte-compiling is disabled, skipping.', '  ', '  running build_ext', "  building 'M2Crypto._m2crypto' extension", '  swigging SWIG/_m2crypto.i to SWIG/_m2crypto_wrap.c', '  swig -python -py3 -I/Users/xx/.local/share/virtualenvs/iHealth-WeChat-UB3mZpIa/include -I/usr/local/python3.6/include/python3.6m -I/usr/include/openssl -I/usr/local/include -I/Library/Developer/CommandLineTools/usr/lib/clang/11.0.0/include -I/Library/Developer/CommandLineTools/usr/include -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory) -I/usr/local/include -I/Library/Developer/CommandLineTools/usr/lib/clang/11.0.0/include -I/Library/Developer/CommandLineTools/usr/include -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory) -includeall -modern -builtin -outdir /private/var/folders/v8/hycw3b7x5vz3yv_lsxvg9fym0000gn/T/pip-install-06p4c1dw/m2crypto/M2Crypto -o SWIG/_m2crypto_wrap.c SWIG/_m2crypto.i', '  Deprecated command line option: -modern. This option is now always on.', "  SWIG/_m2crypto.i:62: Error: Unable to find 'openssl/opensslv.h'", "  SWIG/_m2crypto.i:68: Error: Unable to find 'openssl/safestack.h'", "  SWIG/_evp.i:12: Error: Unable to find 'openssl/opensslconf.h'", "  SWIG/_rc4.i:5: Error: Unable to find 'openssl/opensslconf.h'", "  SWIG/_ec.i:7: Error: Unable to find 'openssl/opensslconf.h'", "  error: command 'swig' failed with exit status 1", '  ----------------------------------------', '  ERROR: Failed building wheel for m2crypto', '    ERROR: Command errored out with exit status 1:', '     command: /Users/xx/.local/share/virtualenvs/iHealth-WeChat-UB3mZpIa/bin/python -u -c \'import sys, setuptools, tokenize; sys.argv[0] = \'"\'"\'/private/var/folders/v8/hycw3b7x5vz3yv_lsxvg9fym0000gn/T/pip-install-06p4c1dw/m2crypto/setup.py\'"\'"\'; __file__=\'"\'"\'/private/var/folders/v8/hycw3b7x5vz3yv_lsxvg9fym0000gn/T/pip-install-06p4c1dw/m2crypto/setup.py\'"\'"\';f=getattr(tokenize, \'"\'"\'open\'"\'"\', open)(__file__);code=f.read().replace(\'"\'"\'\\r\\n\'"\'"\', \'"\'"\'\\n\'"\'"\');f.close();exec(compile(code, __file__, \'"\'"\'exec\'"\'"\'))\' install --record /private/var/folders/v8/hycw3b7x5vz3yv_lsxvg9fym0000gn/T/pip-record-mk0tmw37/install-record.txt --single-version-externally-managed --compile --install-headers /Users/xx/.local/share/virtualenvs/iHealth-WeChat-UB3mZpIa/include/site/python3.6/m2crypto', '         cwd: /private/var/folders/v8/hycw3b7x5vz3yv_lsxvg9fym0000gn/T/pip-install-06p4c1dw/m2crypto/', '    Complete output (58 lines):', '    running install', '    running build', '    running build_py', '    creating build', '    creating build/lib.macosx-10.15-x86_64-3.6', '    creating build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/callback.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/EVP.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/AuthCookie.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/m2.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/ftpslib.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/EC.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/httpslib.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/X509.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/util.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/RSA.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/BIO.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/DH.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/__init__.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/threading.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/Rand.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/SMIME.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/Engine.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/m2xmlrpclib.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/RC4.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/m2urllib2.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/DSA.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/six.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/m2urllib.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/BN.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/m2crypto.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/Err.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    copying M2Crypto/ASN1.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto', '    creating build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '    copying M2Crypto/SSL/cb.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '    copying M2Crypto/SSL/Session.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '    copying M2Crypto/SSL/timeout.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '    copying M2Crypto/SSL/__init__.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '    copying M2Crypto/SSL/TwistedProtocolWrapper.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '    copying M2Crypto/SSL/Cipher.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '    copying M2Crypto/SSL/Connection.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '    copying M2Crypto/SSL/Context.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '    copying M2Crypto/SSL/SSLServer.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '    copying M2Crypto/SSL/ssl_dispatcher.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '    copying M2Crypto/SSL/Checker.py -&gt; build/lib.macosx-10.15-x86_64-3.6/M2Crypto/SSL', '    warning: build_py: byte-compiling is disabled, skipping.', '    ', '    running build_ext', "    building 'M2Crypto._m2crypto' extension", '    swigging SWIG/_m2crypto.i to SWIG/_m2crypto_wrap.c', '    swig -python -py3 -I/Users/xx/.local/share/virtualenvs/iHealth-WeChat-UB3mZpIa/include -I/usr/local/python3.6/include/python3.6m -I/usr/include/openssl -I/usr/local/include -I/Library/Developer/CommandLineTools/usr/lib/clang/11.0.0/include -I/Library/Developer/CommandLineTools/usr/include -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory) -I/usr/local/include -I/Library/Developer/CommandLineTools/usr/lib/clang/11.0.0/include -I/Library/Developer/CommandLineTools/usr/include -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory) -includeall -modern -builtin -outdir /private/var/folders/v8/hycw3b7x5vz3yv_lsxvg9fym0000gn/T/pip-install-06p4c1dw/m2crypto/M2Crypto -o SWIG/_m2crypto_wrap.c SWIG/_m2crypto.i', '    Deprecated command line option: -modern. This option is now always on.', "    SWIG/_m2crypto.i:62: Error: Unable to find 'openssl/opensslv.h'", "    SWIG/_m2crypto.i:68: Error: Unable to find 'openssl/safestack.h'", "    SWIG/_evp.i:12: Error: Unable to find 'openssl/opensslconf.h'", "    SWIG/_rc4.i:5: Error: Unable to find 'openssl/opensslconf.h'", "    SWIG/_ec.i:7: Error: Unable to find 'openssl/opensslconf.h'", "    error: command 'swig' failed with exit status 1", '    ----------------------------------------', 'ERROR: Command errored out with exit status 1: /Users/xx/.local/share/virtualenvs/iHealth-WeChat-UB3mZpIa/bin/python -u -c \'import sys, setuptools, tokenize; sys.argv[0] = \'"\'"\'/private/var/folders/v8/hycw3b7x5vz3yv_lsxvg9fym0000gn/T/pip-install-06p4c1dw/m2crypto/setup.py\'"\'"\'; __file__=\'"\'"\'/private/var/folders/v8/hycw3b7x5vz3yv_lsxvg9fym0000gn/T/pip-install-06p4c1dw/m2crypto/setup.py\'"\'"\';f=getattr(tokenize, \'"\'"\'open\'"\'"\', open)(__file__);code=f.read().replace(\'"\'"\'\\r\\n\'"\'"\', \'"\'"\'\\n\'"\'"\');f.close();exec(compile(code, __file__, \'"\'"\'exec\'"\'"\'))\' install --record /private/var/folders/v8/hycw3b7x5vz3yv_lsxvg9fym0000gn/T/pip-record-mk0tmw37/install-record.txt --single-version-externally-managed --compile --install-headers /Users/xx/.local/share/virtualenvs/iHealth-WeChat-UB3mZpIa/include/site/python3.6/m2crypto Check the logs for full command output.']ERROR: ERROR: Package installation failed...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h4><p>先安装<code>openssl</code>和<code>swig</code>:</p><pre class="line-numbers language-none"><code class="language-none">brew install opensslbrew install swig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以查看<code>openssl</code>安装目录：</p><pre class="line-numbers language-none"><code class="language-none">$ brew --prefix openssl/usr/local/opt/openssl@1.1$ ll /usr/local/opt/openssl@1.1lrwxr-xr-x  1 xx  admin    28B 10  4 15:01 /usr/local/opt/openssl@1.1 -&gt; ../Cellar/openssl@1.1/1.1.1d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以知道openssl的实际安装目录是 /usr/local/Cellar/openssl@1.1/1.1.1d/， /usr/local/opt/openssl@1.1 只是 /usr/local/Cellar/openssl@1.1/1.1.1d/ 一个软链接， 得知 <code>/usr/local/opt/</code> 下存放的都是一些软链接。</p><p>在<code>/usr/local/include/</code>目录下创建<code>openssl</code>的软链接：</p><pre class="line-numbers language-none"><code class="language-none">sudo ln -s /usr/local/opt/openssl@1.1/include/openssl /usr/local/include/openssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>/usr/local/lib/</code>目录下创建<code>libssl.dylib</code>和<code>libcrypto.dylib</code>的软链接：</p><pre class="line-numbers language-none"><code class="language-none">sudo ln -s /usr/local/opt/openssl@1.1/lib/libssl.dylib /usr/local/lib/libssl.dylibsudo ln -s /usr/local/opt/openssl@1.1/lib/libcrypto.dylib /usr/local/lib/libcrypto.dylib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后重新安装<code>m2crypto</code>即可安装成功:</p><pre class="line-numbers language-none"><code class="language-none">(env)$ pipenv install m2crypto       # 或： (env)$ pip install m2crypto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
            <tag> mac </tag>
            
            <tag> pipenv </tag>
            
            <tag> m2crypto </tag>
            
            <tag> swig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql5.7.x编码设置为utf8mb4</title>
      <link href="2020/02/12/mysql5-7-x-encoding-is-set-to-utf8mb4/"/>
      <url>2020/02/12/mysql5-7-x-encoding-is-set-to-utf8mb4/</url>
      
        <content type="html"><![CDATA[<h4 id="1-临时设置编码-重新进入mysql-shell后失效"><a href="#1-临时设置编码-重新进入mysql-shell后失效" class="headerlink" title="1.  临时设置编码(重新进入mysql shell后失效)"></a>1.  临时设置编码(重新进入mysql shell后失效)</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show variables like '%char%';+--------------------------+-----------------------------------------------------------+| Variable_name | Value |+--------------------------+-----------------------------------------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | latin1 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | latin1 || character_set_system | utf8 || character_sets_dir | /usr/local/mysql-5.7.28-macos10.14-x86_64/share/charsets/ |+--------------------------+-----------------------------------------------------------+8 rows in set (0.00 sec)mysql&gt; set character_set_client=utf8mb4;Query OK, 0 rows affected (0.00 sec)mysql&gt; set character_set_connection=utf8mb4;Query OK, 0 rows affected (0.00 sec)mysql&gt; set character_set_database=utf8mb4;Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; set character_set_results=utf8mb4;Query OK, 0 rows affected (0.00 sec)mysql&gt; set character_set_server=utf8mb4;Query OK, 0 rows affected (0.00 sec)mysql&gt; show variables like '%char%';+--------------------------+-----------------------------------------------------------+| Variable_name | Value |+--------------------------+-----------------------------------------------------------+| character_set_client | utf8mb4 || character_set_connection | utf8mb4 || character_set_database | utf8mb4 || character_set_filesystem | binary || character_set_results | utf8mb4 || character_set_server | utf8mb4 || character_set_system | utf8 || character_sets_dir | /usr/local/mysql-5.7.28-macos10.14-x86_64/share/charsets/ |+--------------------------+-----------------------------------------------------------+8 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-永久设置编码"><a href="#2-永久设置编码" class="headerlink" title="2. 永久设置编码"></a>2. 永久设置编码</h4><p>在/etc/my.cnf文件中修改：</p><pre class="line-numbers language-none"><code class="language-none">[mysqld]character-set-client-handshake = FALSEcharacter-set-server = utf8mb4collation-server = utf8mb4_unicode_ciinit_connect = 'SET NAMES utf8mb4'[mysql]default-character-set = utf8mb4[client]default-character-set = utf8mb4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启mysql服务生效。</p><h4 id="3-查看编码及编码集"><a href="#3-查看编码及编码集" class="headerlink" title="3. 查看编码及编码集"></a>3. 查看编码及编码集</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show variables where variable_name like '%char%' or variable_name like 'collation%';+--------------------------+-----------------------------------------------------------+| Variable_name | Value |+--------------------------+-----------------------------------------------------------+| character_set_client | utf8mb4 || character_set_connection | utf8mb4 || character_set_database | utf8mb4 || character_set_filesystem | binary || character_set_results | utf8mb4 || character_set_server | utf8mb4 || character_set_system | utf8 || character_sets_dir | /usr/local/mysql-5.7.28-macos10.14-x86_64/share/charsets/ || collation_connection | utf8mb4_unicode_ci || collation_database | utf8mb4_unicode_ci || collation_server | utf8mb4_unicode_ci |+--------------------------+-----------------------------------------------------------+11 rows in set (0.00 sec)mysql&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-修改已有数据库或表的编码及编码集"><a href="#4-修改已有数据库或表的编码及编码集" class="headerlink" title="4. 修改已有数据库或表的编码及编码集"></a>4. 修改已有数据库或表的编码及编码集</h4><pre class="line-numbers language-none"><code class="language-none"># 修改数据库mysql&gt; ALTER DATABASE database_name CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;# 修改表mysql&gt; ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;# 修改表字段mysql&gt; ALTER TABLE table_name CHANGE column_name column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 编码 </tag>
            
            <tag> utfmb4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac os x从源码编译安装python3.8</title>
      <link href="2019/10/15/install-python3-8-from-source-on-macosx/"/>
      <url>2019/10/15/install-python3-8-from-source-on-macosx/</url>
      
        <content type="html"><![CDATA[<h4 id="1-下载并解压python3-8源码包"><a href="#1-下载并解压python3-8源码包" class="headerlink" title="1. 下载并解压python3.8源码包"></a>1. 下载并解压python3.8源码包</h4><p><a href="https://www.python.org/">https://www.python.org/</a><br><a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></p><p>选择<code>XZ compressed source tarball</code>， 拷贝文件绝对路径链接， 用wget命令下载</p><pre class="line-numbers language-none"><code class="language-none">wget -c https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tar.xzxz -d Python-3.8.0.tar.xztar -xvf Python-3.8.0.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2. 安装依赖"></a>2. 安装依赖</h4><h5 id="2-1-安装sqlite3"><a href="#2-1-安装sqlite3" class="headerlink" title="2.1. 安装sqlite3"></a>2.1. 安装sqlite3</h5><p><a href="http://www.sqlite.org/">http://www.sqlite.org/</a></p><pre class="line-numbers language-none"><code class="language-none">wget -c https://www.sqlite.org/2019/sqlite-autoconf-3280000.tar.gz./configure --prefix=/usr/local/makemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-安装ssl"><a href="#2-2-安装ssl" class="headerlink" title="2.2. 安装ssl"></a>2.2. 安装ssl</h5><pre class="line-numbers language-none"><code class="language-none">brew install zlib opensslln -s /usr/local/Cellar/zlib/1.2.11/include/* /usr/local/includeln -s /usr/local/Cellar/zlib/1.2.11/lib/* /usr/local/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-支持ssl"><a href="#3-支持ssl" class="headerlink" title="3. 支持ssl"></a>3. 支持ssl</h4><pre class="line-numbers language-none"><code class="language-none">cd Python-3.8.0/Modulesvim Setup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>搜索：</p><pre class="line-numbers language-none"><code class="language-none">:/ssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将以下内容取消注释:</p><pre class="line-numbers language-none"><code class="language-none"># Socket module helper for socket(2)#_socket socketmodule.c# Socket module helper for SSL support; you must comment out the other# socket line above, and possibly edit the SSL variable:#SSL=/usr/local/ssl#_ssl _ssl.c \#   -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \#   -L$(SSL)/lib -lssl -lcrypto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>取消注释如下：</p><pre class="line-numbers language-none"><code class="language-none"># Socket module helper for socket(2)_socket socketmodule.c# Socket module helper for SSL support; you must comment out the other# socket line above, and possibly edit the SSL variable:#SSL=/usr/local/ssl_ssl _ssl.c \    -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \    -L$(SSL)/lib -lssl -lcrypto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-编译安装"><a href="#4-编译安装" class="headerlink" title="4. 编译安装"></a>4. 编译安装</h4><p>指定安装目录：</p><pre class="line-numbers language-none"><code class="language-none">./configure --prefix=/usr/local/python3.8 --enable-loadable-sqlite-extensions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或:</p><p>优化选项安装(可选), 执行完上一步后会提示执行以下的代码对Python解释器进行优化，执行该代码后，会编译安装到 <code>/usr/local/bin/</code> 下，且不用添加软连接或环境变量， 如下：</p><pre class="line-numbers language-none"><code class="language-none">If you want a release build with all stable optimizations active (PGO, etc),please run ./configure --enable-optimizations# ./configure --enable-optimizations<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编译安装：</p><pre class="line-numbers language-none"><code class="language-none">makesudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-创建软链接"><a href="#5-创建软链接" class="headerlink" title="5. 创建软链接"></a>5. 创建软链接</h4><pre class="line-numbers language-none"><code class="language-none">sudo ln -s /usr/local/python3.8/bin/python3.8 /usr/bin/python3.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-检测"><a href="#6-检测" class="headerlink" title="6. 检测"></a>6. 检测</h4><pre class="line-numbers language-none"><code class="language-none">$ python3.8Python 3.8.0 (default, Oct 15 2019, 15:00:48)[Clang 10.0.1 (clang-1001.0.46.4)] on darwinType "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; import ssl&gt;&gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql命令</title>
      <link href="2019/08/26/postgresql-commands/"/>
      <url>2019/08/26/postgresql-commands/</url>
      
        <content type="html"><![CDATA[<h4 id="1-postgresql常用命令"><a href="#1-postgresql常用命令" class="headerlink" title="1. postgresql常用命令"></a>1. postgresql常用命令</h4><p>进入数据库<code>postgres</code>:</p><pre class="line-numbers language-none"><code class="language-none">$ psql postgrespsql (11.2)Type "help" for help.postgres=# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>退出postgresql shell:</p><pre class="line-numbers language-none"><code class="language-none">postgres=# exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建用户<code>olddriver</code>:</p><pre class="line-numbers language-none"><code class="language-none">postgres=# create user olddriver with password '123456';CREATE ROLE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除用户<code>oldriver</code>， 并创建用户<code>olddriver</code>， 将数据库的拥有者修改为<code>olddriver</code>:</p><pre class="line-numbers language-none"><code class="language-none">postgres=# drop role oldriver;ERROR:  role "oldriver" cannot be dropped because some objects depend on itDETAIL:  privileges for database postgrespostgres=# revoke all on database didi from oldriver;REVOKEpostgres=# drop role oldriver;ERROR:  role "oldriver" cannot be dropped because some objects depend on itDETAIL:  owner of database didipostgres=# create user olddriver with password '123456';CREATE ROLEpostgres=# alter database didi owner to olddriver;ALTER DATABASEpostgres=# drop role oldriver;DROP ROLEpostgres=# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建数据库<code>didi</code>:</p><pre class="line-numbers language-none"><code class="language-none">postgres=# create database didi owner olddriver;CREATE DATABASE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改数据库<code>didi</code>的拥有者为<code>dicar</code>:</p><pre class="line-numbers language-none"><code class="language-none">postgres=# alter database didi owner to dicar;ALTER DATABASE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> postgresql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac os x sublime text 3安装ctags插件实现代码跳转</title>
      <link href="2019/05/21/Mac-OS-X-sublime-text-3-installs-ctags-plug-in-to-achieve-code-jump/"/>
      <url>2019/05/21/Mac-OS-X-sublime-text-3-installs-ctags-plug-in-to-achieve-code-jump/</url>
      
        <content type="html"><![CDATA[<p>ctags是一款实现代码跳转的插件，可以提高查看代码的效率.</p><h4 id="1-st3安装ctags插件"><a href="#1-st3安装ctags插件" class="headerlink" title="1. st3安装ctags插件"></a>1. st3安装ctags插件</h4><p>快捷键<code>commands + shift + p</code> 打开 <code>Package Control: Instance Package</code>， 搜索 <code>ctags</code>进行安装<code>ctags</code>插件</p><h4 id="2-安装ctags"><a href="#2-安装ctags" class="headerlink" title="2. 安装ctags"></a>2. 安装ctags</h4><p>打开ctags网址下载ctags源码包： <a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a></p><p>或<code>wget</code>命令下载：</p><pre class="line-numbers language-none"><code class="language-none">wget -c https://jaist.dl.sourceforge.net/project/ctags/ctags/5.8/ctags-5.8.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装ctags：</p><pre class="line-numbers language-none"><code class="language-none">tar -xzvf ctags-5.8.tar.gzcd ctags-5.8/./configuremake &amp;&amp; sudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-在st3配置ctags插件"><a href="#3-在st3配置ctags插件" class="headerlink" title="3. 在st3配置ctags插件"></a>3. 在st3配置ctags插件</h4><p>依次打开<code>Sublime Text -- Preferences -- Package Settings -- CTags -- Settings User</code>, 拷贝以下内容保存.</p><pre class="line-numbers language-none"><code class="language-none">{    "command": "/usr/local/bin/ctags",}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>依次打开<code>Sublime Text -- Preferences -- Package Settings -- CTags -- Mouse Bindings User</code>, 拷贝以下内容保存.</p><p>默认：</p><ul><li>按快捷键<code>ctrl + shift + 鼠标左键</code> 代码跳转到函数定义 </li><li>按快捷键<code>ctrl + shift + 鼠标右键</code> 代码跳转到函数引用</li></ul><p>改键后：</p><ul><li>按快捷键<code>ctrl + 鼠标左键</code> 代码跳转到函数定义 </li><li>按快捷键<code>ctrl + 鼠标右键</code> 代码跳转到函数引用</li></ul><pre class="line-numbers language-none"><code class="language-none">[    {        "button": "button1",        "count": 1,        "press_command": "drag_select",        "modifiers": ["ctrl"],        "command": "navigate_to_definition"    },    {        "button": "button2",        "count": 1,        "modifiers": ["ctrl"],        "command": "jump_prev"    }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-ctags自带其他快捷键"><a href="#4-ctags自带其他快捷键" class="headerlink" title="4. ctags自带其他快捷键"></a>4. ctags自带其他快捷键</h4><ul><li><code>ctrl + k + u</code>或<code>ctrl+k, ctrl+u</code>将选择代码全部大写</li><li><code>ctrl + k + l</code>或<code>ctrl+k, ctrl+l</code>将选择代码全部小写</li></ul>]]></content>
      
      
      <categories>
          
          <category> sublimetext3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> sublime text 3 </tag>
            
            <tag> ctags </tag>
            
            <tag> 代码跳转 </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下安装postgresql</title>
      <link href="2019/02/26/install-postgresql-on-linux/"/>
      <url>2019/02/26/install-postgresql-on-linux/</url>
      
        <content type="html"><![CDATA[<p>postgresql官方下载: <a href="https://www.postgresql.org/download/">https://www.postgresql.org/download/</a></p><h4 id="1-for-ubuntu"><a href="#1-for-ubuntu" class="headerlink" title="1. for ubuntu"></a>1. for ubuntu</h4><p><a href="https://www.postgresql.org/download/linux/ubuntu/">https://www.postgresql.org/download/linux/ubuntu/</a></p><p>创建postgresql仓库文件<code>/etc/apt/sources.list.d/pgdg.list</code>, 以添加以下内容:</p><p><code>for 18.04</code>:</p><pre class="line-numbers language-none"><code class="language-none">deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>for 16.04</code>:</p><pre class="line-numbers language-none"><code class="language-none">deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>for 14.04</code>:</p><pre class="line-numbers language-none"><code class="language-none">deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存退出．</p><p>导入仓库签名文件并更新仓库文件列表:</p><pre class="line-numbers language-none"><code class="language-none">wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装postgresql:</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install postgresql-10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后会打印如下信息:</p><pre class="line-numbers language-none"><code class="language-none">Ver Cluster Port Status Owner    Data directory              Log file10  main    5432 down   postgres /var/lib/postgresql/10/main /var/log/postgresql/postgresql-10-main.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可知:</p><ul><li>数据文件目录: /var/lib/postgresql/10/main</li><li>日志文件: /var/log/postgresql/postgresql-10-main.log</li><li>拥有者是postgres用户</li></ul><p>安装完成后，默认会：</p><ul><li><p>创建名为<code>postgres</code>的Linux用户</p></li><li><p>创建名为<code>postgres</code>, 不带密码的默认数据库账号作为数据库管理员</p></li><li><p>创建名为<code>postgres</code>的表</p></li></ul><p>PostgreSQL客户端为<code>psql</code>.</p><p>查看版本号：</p><pre class="line-numbers language-none"><code class="language-none">$ psql --versionpsql (PostgreSQL) 10.7 (Ubuntu 10.7-1.pgdg16.04+1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建名为<code>op</code>用户，　并可指明是否为超级管理员:</p><pre class="line-numbers language-none"><code class="language-none">$ sudo -u postgres createuser --interactiveEnter name of role to add: opShall the new role be a superuser? (y/n) y$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>与下等同:</p><pre class="line-numbers language-none"><code class="language-none">sudo -u postgres createuser --superuser op<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改用户<code>op</code>的密码:</p><pre class="line-numbers language-none"><code class="language-none">$ sudo -u postgres psqlpsql (10.7 (Ubuntu 10.7-1.pgdg16.04+1))Type "help" for help.postgres=# \password op;Enter new password: Enter it again: postgres=# \q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建用户”op”并设置密码<code>123456</code>:</p><pre class="line-numbers language-none"><code class="language-none">$ sudo -u postgres psqlpostgres=# create user op with password '123456';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建数据库，　名为<code>opplatform</code>:</p><pre class="line-numbers language-none"><code class="language-none">sudo -u postgres createdb opplatform<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建数据库并指定所有者，　其中数据库名为<code>opplatform</code>，　数据库所有者为<code>op</code>:</p><pre class="line-numbers language-none"><code class="language-none">sudo -u postgres createdb -O op opplatform;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建数据库<code>opplatform</code>，所有者为<code>op</code>:</p><pre class="line-numbers language-none"><code class="language-none">$ sudo -u postgres psqlpostgres=# create database opplatform owner op;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>连接postgresql的shell:</p><pre class="line-numbers language-none"><code class="language-none">$ sudo -u postgres psqlpsql (10.7 (Ubuntu 10.7-1.pgdg16.04+1))Type "help" for help.postgres=#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看所有数据库及其拥有者:</p><pre class="line-numbers language-none"><code class="language-none">$ sudo -u postgres psqlpsql (10.7 (Ubuntu 10.7-1.pgdg16.04+1))Type "help" for help.postgres=# \lList of databases    Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   ------------+----------+----------+-------------+-------------+----------------------- opplatform | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |  postgres   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |  template0  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +            |          |          |             |             | postgres=CTc/postgres template1  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +            |          |          |             |             | postgres=CTc/postgres(4 rows)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改数据库<code>opplatform</code>的拥有者为<code>op</code>:</p><pre class="line-numbers language-none"><code class="language-none">postgres=# alter database opplatform owner to op;ALTER DATABASEpostgres=# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>退出postgresql的shell:</p><pre class="line-numbers language-none"><code class="language-none">postgres=# \q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>奖数据库<code>opplatform</code>的所有权授予给用户<code>op</code>:</p><pre class="line-numbers language-none"><code class="language-none">postgres=# grant all privileges on database opplatform to op;GRANTpostgres=# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用户<code>op</code>连接数据库<code>opplatform</code>, 报错:</p><pre class="line-numbers language-none"><code class="language-none">$ psql -d opplatform -U op -WPassword for user op: psql: FATAL:  Peer authentication failed for user "op"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解决方法:</p><pre class="line-numbers language-none"><code class="language-none">$ sudo vim /etc/postgresql/10/main/pg_hba.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将以下内容:</p><pre class="line-numbers language-none"><code class="language-none"># "local" is for Unix domain socket connections onlylocal   all             all                                     peer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改为:</p><pre class="line-numbers language-none"><code class="language-none"># "local" is for Unix domain socket connections onlylocal   all             all                                     trust<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>详见: <a href="https://www.postgresql.org/docs/11/auth-pg-hba-conf.html">https://www.postgresql.org/docs/11/auth-pg-hba-conf.html</a></p><pre class="line-numbers language-none"><code class="language-none">$ sudo /etc/init.d/postgresql reload[ ok ] Reloading postgresql configuration (via systemctl): postgresql.service.$ sudo systemctl enable postgresql$ sudo systemctl start postgresql$ sudo systemctl stop postgresql$ sudo systemctl restart postgresql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新执行， 如下， 成功连接:</p><pre class="line-numbers language-none"><code class="language-none">$ psql -d opplatform -U op -WPassword for user op: psql (10.7 (Ubuntu 10.7-1.pgdg16.04+1))Type "help" for help.opplatform=# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postgresql远程授权:</p><pre class="line-numbers language-none"><code class="language-none">sudo vim /etc/postgresql/10/main/pg_hba.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>追加以下内容:</p><pre class="line-numbers language-none"><code class="language-none"># IPv4 local connections:host    all             all             127.0.0.1/32            md5host    all             all             0.0.0.0/0            password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，<code>address</code>为<code>0.0.0.0/0</code>, <code>auth-method</code>为<code>password</code></p><p>还要修改配置文件:</p><pre class="line-numbers language-none"><code class="language-none">sudo vim /etc/postgresql/10/main/postgresql.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将<code>listen_addresses = 'localhost'</code>修改为<code>listen_addresses = '*'</code></p><p>重启postgresql服务生效:</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl restart postgresql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试是否能远程连接:<br>如： 通过navicat premium创建<code>postgresql</code>连接， 填写主机，商品， 初始数据库， 用户名， 密码， 点击”测试连接”， 即可显示”连接成功”。</p><h4 id="2-for-centos"><a href="#2-for-centos" class="headerlink" title="2. for centos"></a>2. for centos</h4><p>未完， 待续…</p>]]></content>
      
      
      <categories>
          
          <category> postgresql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 数据库 </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序猿(媛)养成记</title>
      <link href="2019/01/11/how-to-be-a-nb-coder/"/>
      <url>2019/01/11/how-to-be-a-nb-coder/</url>
      
        <content type="html"><![CDATA[<h4 id="行为习惯Behavior"><a href="#行为习惯Behavior" class="headerlink" title="行为习惯Behavior"></a>行为习惯Behavior</h4><h4 id="程序语言Programming-Language"><a href="#程序语言Programming-Language" class="headerlink" title="程序语言Programming Language"></a>程序语言Programming Language</h4><h4 id="开发工具dev-tools"><a href="#开发工具dev-tools" class="headerlink" title="开发工具dev tools"></a>开发工具dev tools</h4><h4 id="技术栈Technology-Stack"><a href="#技术栈Technology-Stack" class="headerlink" title="技术栈Technology Stack"></a>技术栈Technology Stack</h4><h4 id="架构Architecture"><a href="#架构Architecture" class="headerlink" title="架构Architecture"></a>架构Architecture</h4><h4 id="编码规范code-style"><a href="#编码规范code-style" class="headerlink" title="编码规范code style"></a>编码规范code style</h4><h4 id="运维部署DevOps"><a href="#运维部署DevOps" class="headerlink" title="运维部署DevOps"></a>运维部署DevOps</h4><h4 id="安全Security"><a href="#安全Security" class="headerlink" title="安全Security"></a>安全Security</h4><h4 id="密码学Cryptology"><a href="#密码学Cryptology" class="headerlink" title="密码学Cryptology"></a>密码学Cryptology</h4><h4 id="统计学Statistics"><a href="#统计学Statistics" class="headerlink" title="统计学Statistics"></a>统计学Statistics</h4><h4 id="前端Frontend"><a href="#前端Frontend" class="headerlink" title="前端Frontend"></a>前端Frontend</h4><h4 id="后端backend"><a href="#后端backend" class="headerlink" title="后端backend"></a>后端backend</h4><h4 id="美工UI"><a href="#美工UI" class="headerlink" title="美工UI"></a>美工UI</h4><h4 id="数据库database"><a href="#数据库database" class="headerlink" title="数据库database"></a>数据库database</h4><h4 id="移动互联网Mobile-Internet"><a href="#移动互联网Mobile-Internet" class="headerlink" title="移动互联网Mobile Internet"></a>移动互联网Mobile Internet</h4><h4 id="大数据与云BigData-and-Cloud"><a href="#大数据与云BigData-and-Cloud" class="headerlink" title="大数据与云BigData and Cloud"></a>大数据与云BigData and Cloud</h4><h4 id="开源opensource"><a href="#开源opensource" class="headerlink" title="开源opensource"></a>开源opensource</h4><h4 id="英文english"><a href="#英文english" class="headerlink" title="英文english"></a>英文english</h4><h4 id="打杂other"><a href="#打杂other" class="headerlink" title="打杂other"></a>打杂other</h4>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序员 </tag>
            
            <tag> 码农 </tag>
            
            <tag> 养成记 </tag>
            
            <tag> 技术栈 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下安装elasticsearch</title>
      <link href="2018/12/24/install-elasticsearch-on-linux/"/>
      <url>2018/12/24/install-elasticsearch-on-linux/</url>
      
        <content type="html"><![CDATA[<h4 id="1-安装JDK"><a href="#1-安装JDK" class="headerlink" title="1. 安装JDK"></a>1. 安装JDK</h4><p>jdk8下载地址：</p><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>安装依赖工具：</p><p><code>for ubuntu</code>:</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install vim wget lsof curl git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>for centos</code>:</p><pre class="line-numbers language-none"><code class="language-none">sudo yum install vim wget lsof curl git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>wget命令下载：</p><pre class="line-numbers language-none"><code class="language-none">wget -c --no-check-certificate https://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.tar.gz?AuthParam=1545381787_076fe948da7f81e0fdd1b0b99cf164f0 -O jdk-8u191-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中， jdk安装包的下载链接可以点击相应的<code>tar.gz</code>包， 然后浏览器弹出下载框下载， 在下载页面右键拷贝获取， 一定时候内会失效， 失效则重新获取， <code>-O</code>表示重命名</p><p>解压并安装：</p><pre class="line-numbers language-none"><code class="language-none">tar -xzvf jdk-8u191-linux-x64.tar.gzsudo mkdir -p /usr/local/java/sudo mv jdk1.8.0_191 /usr/local/java/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置环境变量：</p><pre class="line-numbers language-none"><code class="language-none">sudo vim /etc/profile# for zshsudo vim /etc/zsh/zprofile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在文件最后追加：</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/usr/local/java/jdk1.8.0_191export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意， <code>JAVA_HOME</code>修改为你自己的路径</p><p>检测java是否安装成功：</p><pre class="line-numbers language-none"><code class="language-none">$ java -versionjava version "1.8.0_191"Java(TM) SE Runtime Environment (build 1.8.0_191-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意， 如果是ubuntu系统， 在安装elasticsearch时若报如下错误：</p><pre class="line-numbers language-none"><code class="language-none">could not find java; set JAVA_HOME or ensure java is in PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则需要设置默认的JDK才可解决：</p><pre class="line-numbers language-none"><code class="language-none">sudo update-alternatives --install "/usr/bin/java" "java" "/usr/local/java/jdk1.8.0_191/bin/java" 300<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-安装elasticsearch"><a href="#2-安装elasticsearch" class="headerlink" title="2. 安装elasticsearch"></a>2. 安装elasticsearch</h4><h5 id="2-1-for-ubuntu"><a href="#2-1-for-ubuntu" class="headerlink" title="2.1. for ubuntu"></a>2.1. for ubuntu</h5><p>官方安装方法(deb包拉取)： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html</a></p><p>以ubuntu16.04.5为例。</p><p>导入elasticsearch密钥：</p><pre class="line-numbers language-none"><code class="language-none">wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过APT仓库安装：</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install apt-transport-httpsecho "deb https://artifacts.elastic.co/packages/6.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装elasticsearch：</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get updatesudo apt-get install elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-2-for-centos"><a href="#2-2-for-centos" class="headerlink" title="2.2. for centos"></a>2.2. for centos</h5><p>官方安装方法(rpm包拉取)： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rpm.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/rpm.html</a></p><p>安装公钥：</p><pre class="line-numbers language-none"><code class="language-none">rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在目录<code>/etc/yum.repos.d/</code>下创建创建elasticsearch仓库文件<code>elasticsearch.repo</code>：</p><pre class="line-numbers language-none"><code class="language-none">sudo vim /etc/yum.repos.d/elasticsearch.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下：</p><pre class="line-numbers language-none"><code class="language-none">[elasticsearch-6.x]name=Elasticsearch repository for 6.x packagesbaseurl=https://artifacts.elastic.co/packages/6.x/yumgpgcheck=1gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearchenabled=1autorefresh=1type=rpm-md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从rpm仓库中安装elasticsearch:</p><pre class="line-numbers language-none"><code class="language-none">sudo yum updatesudo yum install elasticsearch <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-systemctl管理elasticsearch服务"><a href="#3-systemctl管理elasticsearch服务" class="headerlink" title="3. systemctl管理elasticsearch服务"></a>3. systemctl管理elasticsearch服务</h4><p>配置elasticsearch服务开机自启动：</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl daemon-reloadsudo systemctl enable elasticsearch.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>elasticsearch服务的开启/关闭/重启：</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl start elasticsearch.servicesudo systemctl stop elasticsearch.servicesudo systemctl restart elasticsearch.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>lsof</code>命令通过端口检测进程：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo lsof -i:9200                           COMMAND   PID          USER   FD   TYPE DEVICE SIZE/OFF NODE NAMEjava    28767 elasticsearch  250u  IPv6 214565      0t0  TCP localhost:9200 (LISTEN)java    28767 elasticsearch  251u  IPv6 214564      0t0  TCP ip6-localhost:9200 (LISTEN)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>测试:</p><pre class="line-numbers language-none"><code class="language-none"># for curlcurl http://127.0.0.1:9200# orcurl -XGET localhost:9200# for httpiehttp get http://127.0.0.1:9200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">{    "cluster_name": "elasticsearch",    "cluster_uuid": "AQQKRvPORQGdwcrLKZQcMw",    "name": "lev6ACu",    "tagline": "You Know, for Search",    "version": {        "build_date": "2018-12-17T21:17:40.758843Z",        "build_flavor": "default",        "build_hash": "d2ef93d",        "build_snapshot": false,        "build_type": "deb",        "lucene_version": "7.5.0",        "minimum_index_compatibility_version": "5.0.0",        "minimum_wire_compatibility_version": "5.6.0",        "number": "6.5.4"    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-附elasticsearch-service文件内容"><a href="#4-附elasticsearch-service文件内容" class="headerlink" title="4. 附elasticsearch.service文件内容"></a>4. 附elasticsearch.service文件内容</h4><p><code>for ubuntu</code>, 以ubuntu16.04.5为例<br><code>elasticsearch.service</code>:</p><pre class="line-numbers language-none"><code class="language-none">[Unit]Description=ElasticsearchDocumentation=http://www.elastic.coWants=network-online.targetAfter=network-online.target[Service]RuntimeDirectory=elasticsearchPrivateTmp=trueEnvironment=ES_HOME=/usr/share/elasticsearchEnvironment=ES_PATH_CONF=/etc/elasticsearchEnvironment=PID_DIR=/var/run/elasticsearchEnvironmentFile=-/etc/default/elasticsearchWorkingDirectory=/usr/share/elasticsearchUser=elasticsearchGroup=elasticsearchExecStart=/usr/share/elasticsearch/bin/elasticsearch -p ${PID_DIR}/elasticsearch.pid --quiet# StandardOutput is configured to redirect to journalctl since# some error messages may be logged in standard output before# elasticsearch logging system is initialized. Elasticsearch# stores its logs in /var/log/elasticsearch and does not use# journalctl by default. If you also want to enable journalctl# logging, you can simply remove the "quiet" option from ExecStart.StandardOutput=journalStandardError=inherit# Specifies the maximum file descriptor number that can be opened by this processLimitNOFILE=65536# Specifies the maximum number of processesLimitNPROC=4096# Specifies the maximum size of virtual memoryLimitAS=infinity# Specifies the maximum file sizeLimitFSIZE=infinity# Disable timeout logic and wait until process is stoppedTimeoutStopSec=0# SIGTERM signal is used to stop the Java processKillSignal=SIGTERM# Send the signal only to the JVM rather than its control groupKillMode=process# Java process is never killedSendSIGKILL=no# When a JVM receives a SIGTERM signal it exits with code 143SuccessExitStatus=143[Install]WantedBy=multi-user.target# Built for packages-6.5.4 (packages)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> elasticsearch </tag>
            
            <tag> 搜索 </tag>
            
            <tag> elk </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在github提交PR(Pull Request)</title>
      <link href="2018/12/13/how-to-submit-PR-in-github/"/>
      <url>2018/12/13/how-to-submit-PR-in-github/</url>
      
        <content type="html"><![CDATA[<p>拿本人在github上开源的<a href="https://github.com/xiongxianzhu/cookiecutter-django">cookiecutter-django</a>为例。</p><h4 id="1-fork-repository"><a href="#1-fork-repository" class="headerlink" title="1. fork repository"></a>1. fork repository</h4><p>Fork 开源项目, 单击<a href="https://github.com/xiongxianzhu/cookiecutter-django">cookiecutter-django</a>页面顶部附近的<code>Fork</code>按钮, 这将在GitHub服务器上创建您帐户下的代码副本。</p><h4 id="2-克隆代码副本到本地磁盘"><a href="#2-克隆代码副本到本地磁盘" class="headerlink" title="2. 克隆代码副本到本地磁盘"></a>2. 克隆代码副本到本地磁盘</h4><pre class="line-numbers language-none"><code class="language-none">$ git clone git@github.com:xiongxianzhu/cookiecutter-django.git$ cd cookiecutter-django<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-创建新分支"><a href="#3-创建新分支" class="headerlink" title="3. 创建新分支"></a>3. 创建新分支</h4><p>创建一个新分支来保存您的更改并开始进行更改， 不要在主分支(master分支)上工作。</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout -b my-feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等同于：</p><pre class="line-numbers language-none"><code class="language-none">$ git branch my-feature$ git checkout my-feature<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-commit提交你的更改到新分支"><a href="#4-commit提交你的更改到新分支" class="headerlink" title="4. commit提交你的更改到新分支"></a>4. commit提交你的更改到新分支</h4><p>上面已经切换到新分支<code>my-feature</code>, 在新分支<code>my-feature</code>下进行更改， 然后通过<code>git add</code>和<code>git commit</code>命令来提交更改到新分支。</p><pre class="line-numbers language-none"><code class="language-none">$ git add modified_files$ git commit -m 'changelog'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-push推送您的更改到github上"><a href="#5-push推送您的更改到github上" class="headerlink" title="5. push推送您的更改到github上"></a>5. push推送您的更改到github上</h4><p>通过<code>git push</code>命令推送到源码库repository所在的git托管网站， 本处的git托管网站为<code>github</code>, 若第一次推送， 则需要添加<code>-u</code>参数。</p><pre class="line-numbers language-none"><code class="language-none">$ git push -u origin my-feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-新建PR发送您的更改以供审核"><a href="#6-新建PR发送您的更改以供审核" class="headerlink" title="6. 新建PR发送您的更改以供审核"></a>6. 新建PR发送您的更改以供审核</h4><p>最后，转到<code>cookiecutter-django</code> repo的<a href="https://github.com/xiongxianzhu/cookiecutter-django/pulls">Pull requests</a>页面，然后单击<code>New Pull Request</code>发送您的更改以供审核</p><h4 id="7-GitHub-Pull-Request文档"><a href="#7-GitHub-Pull-Request文档" class="headerlink" title="7. GitHub Pull Request文档"></a>7. GitHub Pull Request文档</h4><p>如果您不熟悉<code>Pull Request</code>，请查看<a href="https://help.github.com/articles/about-pull-requests/">pull request docs</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> PR </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04安装mysql5.7.24</title>
      <link href="2018/12/11/install-mysql5-7-24-on-ubuntu16-04/"/>
      <url>2018/12/11/install-mysql5-7-24-on-ubuntu16-04/</url>
      
        <content type="html"><![CDATA[<p>参考本人CSDN博客上写的文章： <a href="https://blog.csdn.net/Cryhelyxx/article/details/49757217">64位centos6.7安装mysql-5.7.9-linux-glibc2.5-x86_64.tar.gz</a></p><h4 id="1-下载安装包及安装相关依赖"><a href="#1-下载安装包及安装相关依赖" class="headerlink" title="1. 下载安装包及安装相关依赖"></a>1. 下载安装包及安装相关依赖</h4><p>官网： <a href="http://dev.mysql.com/downloads/mysql/">http://dev.mysql.com/downloads/mysql/</a></p><p>mysql搜狐镜像站：<br><a href="http://mirrors.sohu.com/mysql/">http://mirrors.sohu.com/mysql/</a></p><pre class="line-numbers language-none"><code class="language-none">mkdir ~/soft/cd ~/soft/wget -c http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装mysql前先安装所需依赖：</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install libmysqlclient-dev python3-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-创建mysql的用户组-用户-data目录及其用户目录"><a href="#2-创建mysql的用户组-用户-data目录及其用户目录" class="headerlink" title="2. 创建mysql的用户组/用户, data目录及其用户目录"></a>2. 创建mysql的用户组/用户, data目录及其用户目录</h4><pre class="line-numbers language-none"><code class="language-none">sudo groupdel mysqlsudo userdel mysqlsudo groupadd mysqlsudo useradd -g mysql -d /home/mysql -m mysqlsudo mkdir -p /home/mysql/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-解压安装包并将解压包里的内容拷贝到mysql的安装目录-home-mysql"><a href="#3-解压安装包并将解压包里的内容拷贝到mysql的安装目录-home-mysql" class="headerlink" title="3. 解压安装包并将解压包里的内容拷贝到mysql的安装目录/home/mysql"></a>3. 解压安装包并将解压包里的内容拷贝到mysql的安装目录/home/mysql</h4><pre class="line-numbers language-none"><code class="language-none">tar -xzvf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gzcd ~/soft/mysql-5.7.24-linux-glibc2.12-x86_64/sudo mv * /home/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-初始化mysql数据库"><a href="#4-初始化mysql数据库" class="headerlink" title="4. 初始化mysql数据库"></a>4. 初始化mysql数据库</h4><pre class="line-numbers language-none"><code class="language-none">cd /home/mysql./bin/mysqld --user=mysql --basedir=/home/mysql --datadir=/home/mysql/data --initialize<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在上面命令执行完后， 牢记最后一行打印信息的随机密码， 如上<code>**mjT,#x_5sW</code>, 下面我们修改密码时需要用到。</p><h4 id="5-编辑mysql服务文件"><a href="#5-编辑mysql服务文件" class="headerlink" title="5. 编辑mysql服务文件"></a>5. 编辑mysql服务文件</h4><pre class="line-numbers language-none"><code class="language-none">vim /home/mysql/support-files/mysql.server#########修改basedir和datadir==========basedir=/home/mysqldatadir=/home/mysql/data############end############<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-创建软链接"><a href="#6-创建软链接" class="headerlink" title="6. 创建软链接"></a>6. 创建软链接</h4><pre class="line-numbers language-none"><code class="language-none">sudo ln -s /home/mysql/bin/mysql /usr/bin/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-创建配置文件"><a href="#7-创建配置文件" class="headerlink" title="7. 创建配置文件"></a>7. 创建配置文件</h4><p>若存在<code>/etc/my.cnf</code>, 将默认生成的my.cnf备份:</p><pre class="line-numbers language-none"><code class="language-none">sudo mv /etc/my.cnf /etc/my.cnf.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建配置文件:</p><pre class="line-numbers language-none"><code class="language-none">sudo vim /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>/etc/my.cnf</code>配置文件内容如下：</p><pre class="line-numbers language-none"><code class="language-none">[mysqld]basedir = /home/mysqldatadir = /home/mysql/datacharacter_set_server=utf8init_connect='SET NAMES utf8'socket=/home/mysql/mysql.sock[client]default-character-set=utf8socket=/home/mysql/mysql.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-配置mysql服务开机自动启动"><a href="#8-配置mysql服务开机自动启动" class="headerlink" title="8. 配置mysql服务开机自动启动"></a>8. 配置mysql服务开机自动启动</h4><pre class="line-numbers language-none"><code class="language-none">sudo cp /home/mysql/support-files/mysql.server /etc/init.d/mysqldsudo chmod 755 /etc/init.d/mysqldsystemctl enable mysqldsystemctl start mysqldsudo lsof -i:3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-修改初始化时mysql用户root的密码"><a href="#9-修改初始化时mysql用户root的密码" class="headerlink" title="9. 修改初始化时mysql用户root的密码"></a>9. 修改初始化时mysql用户root的密码</h4><p>通过<code>mysqladmin</code>命令来修改root密码, 原密码为<code>mysqld --initialize</code>时牢记下的随机密码， 并检测mysql编码集是否为utf-8， 如下:</p><pre class="line-numbers language-none"><code class="language-none">cd /home/mysql$ ./bin/mysqladmin -u root -p passwordEnter password: New password: Confirm new password: Warning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.$ mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 3Server version: 5.7.24 MySQL Community Server (GPL)Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt; \s--------------mysql Ver 14.14 Distrib 5.7.24, for linux-glibc2.12 (x86_64) using EditLine wrapperConnection id: 3Current database: Current user: root@localhostSSL: Not in useCurrent pager: lessUsing outfile: ''Using delimiter: ;Server version: 5.7.24 MySQL Community Server (GPL)Protocol version: 10Connection: Localhost via UNIX socketServer characterset: utf8Db characterset: utf8Client characterset: utf8Conn. characterset: utf8UNIX socket: /tmp/mysql.sockUptime: 3 min 18 secThreads: 1 Questions: 9 Slow queries: 0 Opens: 106 Flush tables: 1 Open tables: 99 Queries per second avg: 0.045--------------mysql&gt; show variables like "%char%";+--------------------------+-----------------------------+| Variable_name | Value |+--------------------------+-----------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | utf8 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | utf8 || character_set_system | utf8 || character_sets_dir | /home/mysql/share/charsets/ |+--------------------------+-----------------------------+8 rows in set (0.00 sec)mysql&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-mysql相关命令"><a href="#10-mysql相关命令" class="headerlink" title="10. mysql相关命令"></a>10. mysql相关命令</h4><p>p.s. 非root用户在执行以下命令前要加<code>sudo </code></p><p>启动mysql服务： <code>systemctl start mysqld</code></p><p>停止mysql服务： <code>systemctl stop mysqld</code></p><p>重启mysql服务： <code>systemctl restart mysqld</code></p><p>查看mysql服务状态： <code>systemctl status mysqld</code> or <code>lsof -i:3306</code></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装nodejs,npm,cnpm,bower,hexo</title>
      <link href="2018/12/05/install-nodejs-npm-cnpm-bower-hexo-on-linux/"/>
      <url>2018/12/05/install-nodejs-npm-cnpm-bower-hexo-on-linux/</url>
      
        <content type="html"><![CDATA[<p>nodejs长期LTS稳定版： <a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p>nodejs最新版： <a href="https://nodejs.org/en/download/current/">https://nodejs.org/en/download/current/</a></p><p>linux选择： <code>Linux Binaries (x64)</code></p><pre class="line-numbers language-none"><code class="language-none">$ wget -c https://nodejs.org/dist/v10.14.1/node-v10.14.1-linux-x64.tar.xz$ xz -d node-v10.14.1-linux-x64.tar.xz$ tar -xvf node-v10.14.1-linux-x64.tar$ sudo mv node-v10.14.1-linux-x64 /usr/local/node$ sudo ln -s /usr/local/node/bin/npm /usr/bin/npm$ sudo ln -s /usr/local/node/bin/node /usr/bin/node$ npm -v6.4.1$ node -vv10.14.1$ npm install -g cnpm --registry=https://registry.npm.taobao.org$ sudo ln -s /usr/local/node/bin/cnpm /usr/bin/cnpm$ cnpm -v$ cnpm install -g bower$ sudo ln -s /usr/local/node/bin/bower /usr/bin/bower$ bower -v1.8.4$ cnpm i hexo -g$ sudo ln -s /usr/local/node/bin/hexo /usr/bin/hexo$ hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
            <tag> bower </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux源码编译安装nginx1.15.7</title>
      <link href="2018/12/05/install-nginx1-15-7-from-source-on-linux/"/>
      <url>2018/12/05/install-nginx1-15-7-from-source-on-linux/</url>
      
        <content type="html"><![CDATA[<h4 id="1-源码包准备"><a href="#1-源码包准备" class="headerlink" title="1. 源码包准备"></a>1. 源码包准备</h4><p>安装nginx所需工具源码包下载地址：</p><p><code>nginx</code>: <a href="https://nginx.org/download/">https://nginx.org/download/</a><br><code>pcre</code>:  <a href="http://www.pcre.org/">http://www.pcre.org/</a><br><code>zlib</code>:  <a href="https://www.zlib.net/">https://www.zlib.net/</a><br><code>openssl</code>: <a href="https://www.openssl.org/">https://www.openssl.org/</a></p><p>安装nginx所需源码包：</p><ul><li>nginx-1.15.7.tar.gz</li><li>pcre-8.42.tar.gz</li><li>zlib-1.2.11.tar.gz</li><li>openssl-1.1.1a.tar.gz</li></ul><p>通过<code>wget</code>命令下载：</p><pre class="line-numbers language-none"><code class="language-none">wget -c https://nginx.org/download/nginx-1.15.7.tar.gzwget -c https://ftp.pcre.org/pub/pcre/pcre-8.42.tar.gzwget -c https://www.zlib.net/zlib-1.2.11.tar.gzwget -c https://www.openssl.org/source/openssl-1.1.1a.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解压：</p><pre class="line-numbers language-none"><code class="language-none">tar -xzvf nginx-1.15.7.tar.gztar -xzvf pcre-8.42.tar.gztar -xzvf zlib-1.2.11.tar.gztar -xzvf openssl-1.1.1a.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-编译环境工具安装"><a href="#2-编译环境工具安装" class="headerlink" title="2. 编译环境工具安装"></a>2. 编译环境工具安装</h4><p><code>for centos</code>:</p><pre class="line-numbers language-none"><code class="language-none">sudo yum check-update || sudo yum update -ysudo yum groupinstall -y 'Development Tools' &amp;&amp; sudo yum install -y vimsudo yum install -y epel-releasesudo yum install -y perl perl-devel perl-ExtUtils-Embed libxslt libxslt-devel libxml2 libxml2-devel gd gd-devel GeoIP GeoIP-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>for ubuntu</code>:</p><p>可选依赖进行安装:</p><ul><li><a href="https://www.perl.org/">PERL</a></li><li>LIBATOMIC_OPS</li><li><a href="https://libgd.github.io/">LibGD</a></li><li>MaxMind GeoIP</li><li><a href="http://xmlsoft.org/">libxml2</a></li><li><a href="http://xmlsoft.org/libxslt/">libxslt</a></li></ul><pre class="line-numbers language-none"><code class="language-none">sudo apt update &amp;&amp; sudo apt upgrade -ysudo apt install build-essential -ysudo apt install libxml2 libxml2-dev libxslt1.1 libxslt1-dev libgd-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-源码编译安装nginx"><a href="#3-源码编译安装nginx" class="headerlink" title="3. 源码编译安装nginx"></a>3. 源码编译安装nginx</h4><p><code>for centos</code>:</p><pre class="line-numbers language-none"><code class="language-none">./configure --prefix=/usr/local/nginx \            --sbin-path=/usr/sbin/nginx \            --conf-path=/etc/nginx/nginx.conf \            --user=nginx \            --group=nginx \            --pid-path=/var/run/nginx.pid \            --lock-path=/var/run/nginx.lock \            --error-log-path=/var/log/nginx/error.log \            --http-log-path=/var/log/nginx/access.log \            --with-select_module \            --with-poll_module \            --with-threads \            --with-file-aio \            --with-http_ssl_module \            --with-http_v2_module \            --with-http_realip_module \            --with-http_addition_module \            --with-http_xslt_module=dynamic \            --with-http_image_filter_module=dynamic \            --with-http_geoip_module=dynamic \            --with-http_sub_module \            --with-http_dav_module \            --with-http_flv_module \            --with-http_mp4_module \            --with-http_gunzip_module \            --with-http_gzip_static_module \            --with-http_auth_request_module \            --with-http_random_index_module \            --with-http_secure_link_module \            --with-http_degradation_module \            --with-http_slice_module \            --with-http_stub_status_module \            --with-mail=dynamic \            --with-mail_ssl_module \            --with-stream \            --with-stream_ssl_module \            --with-stream_realip_module \            --with-stream_geoip_module=dynamic \            --with-stream_ssl_preread_module \            --with-compat \            --with-pcre=../pcre-8.42 \            --with-pcre-jit \            --with-zlib=../zlib-1.2.11 \            --with-openssl=../openssl-1.1.1a \            --with-openssl-opt=no-nextprotoneg \            --with-debugmakesudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>for ubuntu</code>:</p><pre class="line-numbers language-none"><code class="language-none">./configure --prefix=/usr/local/nginx \            --sbin-path=/usr/sbin/nginx \            --conf-path=/etc/nginx/nginx.conf \            --user=nginx \            --group=nginx \            --pid-path=/var/run/nginx.pid \            --lock-path=/var/run/nginx.lock \            --error-log-path=/var/log/nginx/error.log \            --http-log-path=/var/log/nginx/access.log \            --with-select_module \            --with-poll_module \            --with-threads \            --with-file-aio \            --with-http_ssl_module \            --with-http_v2_module \            --with-http_realip_module \            --with-http_addition_module \            --with-http_sub_module \            --with-http_dav_module \            --with-http_flv_module \            --with-http_mp4_module \            --with-http_gunzip_module \            --with-http_gzip_static_module \            --with-http_auth_request_module \            --with-http_random_index_module \            --with-http_secure_link_module \            --with-http_degradation_module \            --with-http_slice_module \            --with-http_stub_status_module \            --with-mail=dynamic \            --with-mail_ssl_module \            --with-stream \            --with-stream_ssl_module \            --with-stream_realip_module \            --with-stream_ssl_preread_module \            --with-compat \            --with-pcre=../pcre-8.42 \            --with-pcre-jit \            --with-zlib=../zlib-1.2.11 \            --with-openssl=../openssl-1.1.1a \            --with-openssl-opt=no-nextprotoneg \            --with-debugmakesudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-打印nginx版本，编译器版本及配置脚本选项"><a href="#4-打印nginx版本，编译器版本及配置脚本选项" class="headerlink" title="4. 打印nginx版本，编译器版本及配置脚本选项"></a>4. 打印nginx版本，编译器版本及配置脚本选项</h4><pre class="line-numbers language-none"><code class="language-none">sudo nginx -Vnginx version: nginx/1.15.7built by gcc 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC) built with OpenSSL 1.1.1a  20 Nov 2018TLS SNI support enabledconfigure arguments: --prefix=/usr/local/nginx --conf-path=/etc/nginx/nginx.conf --user=nginx --group=nginx --pid-path=/var/run/nginx/nginx.pid --lock-path=/var/run/nginx.lock --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-select_module --with-poll_module --with-threads --with-file-aio --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_auth_request_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module --with-mail=dynamic --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-stream_ssl_preread_module --with-compat --with-pcre=../pcre-8.42 --with-pcre-jit --with-zlib=../zlib-1.2.11 --with-openssl=../openssl-1.1.1a --with-openssl-opt=no-nextprotoneg --with-debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-创建nginx用户及用户组"><a href="#5-创建nginx用户及用户组" class="headerlink" title="5. 创建nginx用户及用户组"></a>5. 创建nginx用户及用户组</h4><pre class="line-numbers language-none"><code class="language-none">sudo useradd --system --home /var/cache/nginx --shell /sbin/nologin --comment "nginx user" --user-group nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-创建nginx-systemd-unit文件"><a href="#6-创建nginx-systemd-unit文件" class="headerlink" title="6. 创建nginx systemd unit文件"></a>6. 创建nginx systemd unit文件</h4><p><code>for centos</code>:</p><pre class="line-numbers language-none"><code class="language-none">sudo vim /usr/lib/systemd/system/nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-none"><code class="language-none">sudo vim /lib/systemd/system/nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拷贝粘贴以下内容:</p><pre class="line-numbers language-none"><code class="language-none">[Unit]Description=nginx - high performance web serverDocumentation=https://nginx.org/en/docs/After=network-online.target remote-fs.target nss-lookup.targetWants=network-online.target[Service]Type=forkingPIDFile=/var/run/nginx.pidExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.confExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.confExecReload=/bin/kill -s HUP $MAINPIDExecStop=/bin/kill -s TERM $MAINPID[Install]WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>for ubuntu</code>:</p><pre class="line-numbers language-none"><code class="language-none">sudo vim /etc/systemd/system/nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-none"><code class="language-none">sudo vim /lib/systemd/system/nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拷贝粘贴以下内容:</p><pre class="line-numbers language-none"><code class="language-none">[Unit]Description=A high performance web server and a reverse proxy serverAfter=network.target[Service]Type=forkingPIDFile=/var/run/nginx.pidExecStartPre=/usr/sbin/nginx -t -q -g 'daemon on; master_process on;'ExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;'ExecReload=/usr/sbin/nginx -g 'daemon on; master_process on;' -s reloadExecStop=/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /var/run/nginx.pidTimeoutStopSec=5KillMode=mixed[Install]WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-开启并启用nginx服务开机自启动"><a href="#7-开启并启用nginx服务开机自启动" class="headerlink" title="7. 开启并启用nginx服务开机自启动"></a>7. 开启并启用nginx服务开机自启动</h4><pre class="line-numbers language-none"><code class="language-none">sudo systemctl start nginx.service &amp;&amp; sudo systemctl enable nginx.servicesudo systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>检查nginx服务是否会在重启后自启动:</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl is-enabled nginx.service# enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启你的vps查看nginx服务是否自启动:</p><pre class="line-numbers language-none"><code class="language-none">sudo shutdown -r now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查nginx是否正在运行:</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl status nginx.serviceps aux | grep nginxcurl -I 127.0.0.1sudo lsof -i:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-nginx服务管理"><a href="#8-nginx服务管理" class="headerlink" title="8. nginx服务管理"></a>8. nginx服务管理</h4><p>nginx服务启动:</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl start nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nginx服务停止:</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl stop nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nginx服务重启:</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nginx配置文件热更新:</p><pre class="line-numbers language-none"><code class="language-none">sudo nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nginx配置文件语法检查:</p><pre class="line-numbers language-none"><code class="language-none">sudo nginx -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="9-端口监听检查"><a href="#9-端口监听检查" class="headerlink" title="9. 端口监听检查"></a>9. 端口监听检查</h4><pre class="line-numbers language-none"><code class="language-none">sudo netstat -anpsudo netstat -tualpn | grep LISTENsudo netstat -tualpn | grep 80sudo netstat -tualpn | grep 443telnet [IP/域名] 443Trying [IP]...Connected to [IP/域名].Escape character is '^]'.Connection closed by foreign host.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建nginx配置文件目录"><a href="#创建nginx配置文件目录" class="headerlink" title="创建nginx配置文件目录"></a>创建nginx配置文件目录</h4><p>在nginx配置文件根目录下创建目录<code>conf.d</code>:</p><pre class="line-numbers language-none"><code class="language-none">sudo mkdir -p /etc/nginx/conf.d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在nginx配置文件<code>/etc/nginx/nginx.conf</code>使<code>/etc/nginx/conf.d</code>生效，在http模块内添加<code>include /etc/nginx/conf.d/*.conf;</code>, <code>nginx.conf</code>文件内容示例如下:</p><pre class="line-numbers language-none"><code class="language-none"># user  nobody;user nginx nginx;worker_processes  4;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;error_log /var/log/nginx/error.log info;#pid        logs/nginx.pid;events {    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';    access_log  /var/log/nginx/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    include /etc/nginx/conf.d/*.conf;    server {        listen       80;        server_name  localhost;        #charset koi8-r;        #access_log  logs/host.access.log  main;        location / {            root   html;            index  index.html index.htm;        }        #error_page  404              /404.html;        # redirect server error pages to the static page /50x.html        #        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }        # proxy the PHP scripts to Apache listening on 127.0.0.1:80        #        #location ~ \.php$ {        #    proxy_pass   http://127.0.0.1;        #}        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000        #        #location ~ \.php$ {        #    root           html;        #    fastcgi_pass   127.0.0.1:9000;        #    fastcgi_index  index.php;        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;        #    include        fastcgi_params;        #}        # deny access to .htaccess files, if Apache's document root        # concurs with nginx's one        #        #location ~ /\.ht {        #    deny  all;        #}    }    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server {    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}    # HTTPS server    #    #server {    #    listen       443 ssl;    #    server_name  localhost;    #    ssl_certificate      cert.pem;    #    ssl_certificate_key  cert.key;    #    ssl_session_cache    shared:SSL:1m;    #    ssl_session_timeout  5m;    #    ssl_ciphers  HIGH:!aNULL:!MD5;    #    ssl_prefer_server_ciphers  on;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>注意</strong></em>： 在给nginx配置https证书时， 需要检查防火墙和阿里云安全组是否对443端口开放， 且安全组是否在nginx所在的ecs实例上。</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux源码安装python3.6.7</title>
      <link href="2018/12/03/install-python3-6-7-from-source-on-linux/"/>
      <url>2018/12/03/install-python3-6-7-from-source-on-linux/</url>
      
        <content type="html"><![CDATA[<h4 id="源码安装python3-6-7"><a href="#源码安装python3-6-7" class="headerlink" title="源码安装python3.6.7"></a>源码安装python3.6.7</h4><p><a href="https://www.python.org/">https://www.python.org/</a><br><a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></p><p>选择<code>XZ compressed source tarball</code>， 拷贝文件绝对路径链接， 用wget命令下载</p><pre class="line-numbers language-none"><code class="language-none">$ cd$ mkdir soft$ cd soft$ wget -c https://www.python.org/ftp/python/3.6.7/Python-3.6.7.tar.xz$ xz -d Python-3.6.7.tar.xz$ tar -xvf Python-3.6.7.tar$ cd Python-3.6.7$ sudo yum install -y readline-devel libffi-devel$ ./configure --prefix=/usr/local/python3.6 --with-ssl --enable-loadable-sqlite-extensions$ make &amp;&amp; sudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中， 在configure加入–with-ssl是使用ssl功能模块。</p><p><code>for centos</code>:</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install -y readline-devel libffi-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>for ubuntu</code>:</p><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get install -y build-essential openssl libssl-dev libreadline-dev libffi-dev libsqlite3-dev sqlite3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>装好后，将 /usr/local/python3.6/bin 加入 PATH:</p><pre class="line-numbers language-none"><code class="language-none">export PATH=/usr/local/python3.6/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在/etc/profile或/etc/zsh/zprofile或/etc/zprofile中添加以上环境变量， 并source /etc/profile  或 source /etc/zsh/zprofile 或source /etc/zprofile 使环境变量全局所有用户生效</p><p>再在~/.zshrc后面追加source /etc/zsh/zprofile</p><p>在~/.zshrc文件新追加的内容如下：</p><pre class="line-numbers language-none"><code class="language-none">source /etc/zsh/zprofileif [ -f /usr/local/python3.6/bin/virtualenvwrapper.sh ]; then    export WORKON_HOME=$HOME/.virtualenvs    source /usr/local/python3.6/bin/virtualenvwrapper.shfi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检测python3.6.7是否安装成功：</p><pre class="line-numbers language-none"><code class="language-none">$ python3Python 3.6.7 (default, Oct 30 2018, 17:39:33) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linuxType "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; import ssl&gt;&gt;&gt; exit()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下源码安装redis</title>
      <link href="2018/06/22/install-redis-on-linux/"/>
      <url>2018/06/22/install-redis-on-linux/</url>
      
        <content type="html"><![CDATA[<p>redis官方下载网址： <a href="https://redis.io/download">https://redis.io/download</a></p><p>安装目录： <code>/usr/local/bin/</code><br>配置文件路径： <code>/etc/redis/redis.conf</code><br>配置端口： <code>6379</code><br>服务端： <code>/usr/local/bin/redis-server</code><br>客户端： <code>/usr/local/bin/redis-cli</code><br>持久化文件存放目录路径： <code>/var/lib/redis</code><br>pid路径： <code>/var/run/redis.pid</code><br>日志路径： <code>/var/log/redis.log</code></p><h4 id="1-centos下安装redis"><a href="#1-centos下安装redis" class="headerlink" title="1. centos下安装redis"></a>1. centos下安装redis</h4><p>以centos7.4为例.</p><h5 id="1-1-源码编译安装"><a href="#1-1-源码编译安装" class="headerlink" title="1.1. 源码编译安装"></a>1.1. 源码编译安装</h5><pre class="line-numbers language-none"><code class="language-none">$ mkdir ~/soft$ cd ~/soft$ wget -c http://download.redis.io/releases/redis-4.0.10.tar.gz$ tar xzf redis-4.0.10.tar.gz$ cd redis-4.0.10$ make$ sudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-2-添加服务并添加到开机自启动"><a href="#1-2-添加服务并添加到开机自启动" class="headerlink" title="1.2. 添加服务并添加到开机自启动"></a>1.2. 添加服务并添加到开机自启动</h5><pre class="line-numbers language-none"><code class="language-none">$ cd ~/soft/redis-4.0.10/utils$ sudo ./install_server.shWelcome to the redis service installerThis script will help you easily set up a running redis serverPlease select the redis port for this instance: [6379] Selecting default: 6379Please select the redis config file name [/etc/redis/6379.conf] /etc/redis/redis.confPlease select the redis log file name [/var/log/redis_6379.log] /var/log/redis.logPlease select the data directory for this instance [/var/lib/redis/6379] /var/lib/redisPlease select the redis executable path [] /usr/local/bin/redis-serverSelected config:Port : 6379Config file : /etc/redis/redis.confLog file : /var/log/redis.logData dir : /var/lib/redisExecutable : /usr/local/bin/redis-serverCli Executable : /usr/local/bin/redis-cliIs this ok? Then press ENTER to go on or Ctrl-C to abort.Copied /tmp/6379.conf =&gt; /etc/init.d/redis_6379Installing service...Successfully added to chkconfig!Successfully added to runlevels 345!Starting Redis server...Installation successful!$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-3-创建redis用户及其用户组并给相应目录授权"><a href="#1-3-创建redis用户及其用户组并给相应目录授权" class="headerlink" title="1.3. 创建redis用户及其用户组并给相应目录授权"></a>1.3. 创建redis用户及其用户组并给相应目录授权</h5><pre class="line-numbers language-none"><code class="language-none">$ sudo useradd --r --U -M redis$ sudo chown redis:redis /var/lib/redis$ sudo chmod 770 /var/lib/redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="1-4-修改服务名及配置文件"><a href="#1-4-修改服务名及配置文件" class="headerlink" title="1.4. 修改服务名及配置文件"></a>1.4. 修改服务名及配置文件</h5><p>重命名服务名<code>redis_6379</code>为<code>redis</code>, 在此之前先停止服务:</p><pre class="line-numbers language-none"><code class="language-none">$ sudo /etc/init.d/redis_6379 stop$ sudo mv /etc/init.d/redis_6379 /etc/init.d/redis$ sudo vim /etc/init.d/redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将文件内的<code>redis_6379</code>替换为<code>redis</code>, vim按ESC切换到命令模式， 替换后保存退出vim</p><pre class="line-numbers language-none"><code class="language-none">:%s/redis_6379/redis/g:wq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑配置文件<code>/etc/redis/redis.conf</code>：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo vim /etc/redis/redis.conf. . . daemonize yes. . . supervised systemd. . . pidfile /var/run/redis.pid. . . logfile /var/log/redis.log. . . dir /var/lib/redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将文件内的<code>redis_6379</code>替换为<code>redis</code>, vim按ESC切换到命令模式， 替换后保存退出vim</p><pre class="line-numbers language-none"><code class="language-none">:%s/redis_6379/redis/g:wq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-5-redis服务管理"><a href="#1-5-redis服务管理" class="headerlink" title="1.5. redis服务管理"></a>1.5. redis服务管理</h5><pre class="line-numbers language-none"><code class="language-none">$ sudo systemctl daemon-reload$ sudo systemctl enable redis$ sudo systemctl status redis● redis.service - LSB: start and stop redis   Loaded: loaded (/etc/rc.d/init.d/redis; bad; vendor preset: disabled)   Active: inactive (dead) since 五 2018-06-22 14:48:36 CST; 7s ago     Docs: man:systemd-sysv-generator(8)  Process: 21946 ExecStop=/etc/rc.d/init.d/redis stop (code=exited, status=0/SUCCESS)  Process: 21909 ExecStart=/etc/rc.d/init.d/redis start (code=exited, status=0/SUCCESS)6月 22 14:24:50 izm5eat3t2va6ch6mdbpbtz systemd[1]: Starting LSB: start and ...6月 22 14:24:50 izm5eat3t2va6ch6mdbpbtz redis[21909]: Starting Redis server...6月 22 14:24:50 izm5eat3t2va6ch6mdbpbtz systemd[1]: Started LSB: start and s...6月 22 14:48:36 izm5eat3t2va6ch6mdbpbtz systemd[1]: Stopping LSB: start and ...6月 22 14:48:36 izm5eat3t2va6ch6mdbpbtz redis[21946]: /var/run/redis.pid doe...6月 22 14:48:36 izm5eat3t2va6ch6mdbpbtz systemd[1]: Stopped LSB: start and s...Hint: Some lines were ellipsized, use -l to show in full.$ sudo systemctl start redis● redis.service - LSB: start and stop redis   Loaded: loaded (/etc/rc.d/init.d/redis; bad; vendor preset: disabled)   Active: active (exited) since 五 2018-06-22 14:24:50 CST; 5s ago     Docs: man:systemd-sysv-generator(8)  Process: 21909 ExecStart=/etc/rc.d/init.d/redis start (code=exited, status=0/SUCCESS)6月 22 14:24:50 izm5eat3t2va6ch6mdbpbtz systemd[1]: Starting LSB: start and ...6月 22 14:24:50 izm5eat3t2va6ch6mdbpbtz redis[21909]: Starting Redis server...6月 22 14:24:50 izm5eat3t2va6ch6mdbpbtz systemd[1]: Started LSB: start and s...Hint: Some lines were ellipsized, use -l to show in full.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启服务： <code>sudo systemctl start redis</code><br>停止服务： <code>sudo systemctl stop redis</code><br>重启服务： <code>sudo systemctl restart redis</code><br>查看进程： <code>sudo lsof -i:6379</code><br>杀掉进程： <code>sudo kill -9 pid</code><br>进入redis shell: <code>redis-cli</code></p><h4 id="2-ubuntu下安装redis"><a href="#2-ubuntu下安装redis" class="headerlink" title="2. ubuntu下安装redis"></a>2. ubuntu下安装redis</h4><p>以ubuntu16.04为例.</p><p>源码安装步骤与centos的基本相同。</p>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04.4下安装mongodb的图形管理工具robomongo</title>
      <link href="2018/05/30/install-robomongo-on-ubuntu16-04-4/"/>
      <url>2018/05/30/install-robomongo-on-ubuntu16-04-4/</url>
      
        <content type="html"><![CDATA[<h4 id="1-官网下载"><a href="#1-官网下载" class="headerlink" title="1. 官网下载"></a>1. 官网下载</h4><p>从官网 <a href="https://robomongo.org/download">https://robomongo.org/download</a> 下载当前最新的<code>robomongo</code>程序包<code>robo3t-1.2.1-linux-x86_64-3e50a65.tar.gz</code></p><pre class="line-numbers language-none"><code class="language-none">$ mkdir -p ~/soft$ cd ~/soft/$ wget -c "https://download.robomongo.org/1.2.1/linux/robo3t-1.2.1-linux-x86_64-3e50a65.tar.gz"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-解压并安装"><a href="#2-解压并安装" class="headerlink" title="2. 解压并安装"></a>2. 解压并安装</h4><pre class="line-numbers language-none"><code class="language-none">$ cd ~/soft/$ tar -xzvf robo3t-1.2.1-linux-x86_64-3e50a65.tar.gz$ cd robo3t-1.2.1-linux-x86_64-3e50a65$ cd bin/$ ./robo3t$ cd ~/soft/$ sudo mv robo3t-1.2.1-linux-x86_64-3e50a65 /usr/local/robomongo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-添加环境变量使命令生效"><a href="#3-添加环境变量使命令生效" class="headerlink" title="3. 添加环境变量使命令生效"></a>3. 添加环境变量使命令生效</h4><p>添加环境变量<code>ROBOMONGO_HOME</code>， 并在环境变量<code>PATH</code>追加<code>$ROBOMONGO_HOME/bin</code></p><pre class="line-numbers language-none"><code class="language-none">$ sudo vim /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>追加的内容如下：</p><pre class="line-numbers language-none"><code class="language-none">export ROBOMONGO_HOME=/usr/local/robomongoexport PATH=$PATH:$ROBOMONGO_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使文件<code>/etc/profile</code>内新添加的环境变量生效：</p><pre class="line-numbers language-none"><code class="language-none">$ source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于使用了zsh shell代替base shell的用户， 执行完source命令后会回到base shell下， 若继续使用zsh shell， 则需要logout再login， 命令<code>robo3t</code>才生效</p><pre class="line-numbers language-none"><code class="language-none">$ robo3t --versionMongoDB shell version v3.4.3-8-g05b19c6git version: 05b19c6063a4b02f9b0bccc034be68bb8cdac899OpenSSL version: OpenSSL 1.0.1u  22 Sep 2016allocator: tcmallocmodules: nonebuild environment:    distarch: x86_64    target_arch: x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK, Enjoy it~</p>]]></content>
      
      
      <categories>
          
          <category> mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> mongo </tag>
            
            <tag> robomongo </tag>
            
            <tag> 图形管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="2018/05/25/git-commands/"/>
      <url>2018/05/25/git-commands/</url>
      
        <content type="html"><![CDATA[<h4 id="1-初始化git本地库"><a href="#1-初始化git本地库" class="headerlink" title="1. 初始化git本地库"></a>1. 初始化git本地库</h4><pre class="line-numbers language-none"><code class="language-none">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-设置全局的git用户名和邮箱"><a href="#2-设置全局的git用户名和邮箱" class="headerlink" title="2. 设置全局的git用户名和邮箱"></a>2. 设置全局的git用户名和邮箱</h4><pre class="line-numbers language-none"><code class="language-none">git config --global user.name 'yourname'git config --global user.email 'youremail@example.com'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若只针对一个项目Repository, 则不需要参数<code>--global</code></p><h4 id="3-ssh-keygen命令生成ssh密钥"><a href="#3-ssh-keygen命令生成ssh密钥" class="headerlink" title="3. ssh-keygen命令生成ssh密钥"></a>3. ssh-keygen命令生成ssh密钥</h4><pre class="line-numbers language-none"><code class="language-none">cd "c:/Users/用户名/"  # 对于windows系统用户， 进入到用户根目录下cd ~                # 对于linux系统用户， 进入到用户根目录下mkdir .ssh          # 创建目录.sshcd .ssh             # 进入.ssh目录下ssh-keygen          # 默认直接回车情况下， 创建私钥id_rsa和公钥id_rsa.pub两个文件， 且私钥密码为空ssh-keygen -t rsa   # -t表示指明生成ras的私钥和公钥ssh-keygen -t rsa -C "我的SSH密钥"  # -C表示添加密钥的注释<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-检测ssh-key通过"><a href="#4-检测ssh-key通过" class="headerlink" title="4. 检测ssh key通过"></a>4. 检测ssh key通过</h4><p>命令<code>ssh -T git@xxx.com</code>, 其中， xxx.com是代码托管网站的网站</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@gitlab.comWelcome to GitLab, @zhuxiongxian!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-查看配置信息"><a href="#5-查看配置信息" class="headerlink" title="5. 查看配置信息"></a>5. 查看配置信息</h4><pre class="line-numbers language-none"><code class="language-none">git config --list   # 查看本地仓库的git配置信息git config -l       # 同上， --list参数可简写为-lgit config --global -l # 查看全局的git配置信息， --global表示全局<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="6-git之https或http方式设置记住用户名和密码"><a href="#6-git之https或http方式设置记住用户名和密码" class="headerlink" title="6. git之https或http方式设置记住用户名和密码"></a>6. git之https或http方式设置记住用户名和密码</h4><p>https方式每次都要输入密码，按照如下设置即可输入一次就不用再手输入密码的困扰而且又享受https带来的极速</p><p>全局设置记住密码（默认15分钟）：</p><pre class="line-numbers language-none"><code class="language-none">git config --global credential.helper cache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>全局设置长期存储密码：</p><pre class="line-numbers language-none"><code class="language-none">git config --global credential.helper store<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本地设置长期存储密码， 在项目根目录下执行以下命令：</p><pre class="line-numbers language-none"><code class="language-none">git config credential.helper store<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者在本地的工程文件夹的.git下打开config文件， 在文件<code>project/.git/config</code>添加：</p><pre class="line-numbers language-none"><code class="language-none">[credential]    helper = store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再输入一次用户名密码后就可以保存住了。</p><h4 id="7-更新代码-拉取代码"><a href="#7-更新代码-拉取代码" class="headerlink" title="7. 更新代码/拉取代码"></a>7. 更新代码/拉取代码</h4><pre class="line-numbers language-none"><code class="language-none">git pullgit pull origin &lt;remote_branch&gt;git pull origin &lt;remote_branch&gt;:&lt;local_branch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="8-查看有内容变更的文件"><a href="#8-查看有内容变更的文件" class="headerlink" title="8. 查看有内容变更的文件"></a>8. 查看有内容变更的文件</h4><pre class="line-numbers language-none"><code class="language-none">git status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="9-提交代码-上传代码"><a href="#9-提交代码-上传代码" class="headerlink" title="9. 提交代码/上传代码"></a>9. 提交代码/上传代码</h4><pre class="line-numbers language-none"><code class="language-none">git add .git commit -m "推送的消息"git push origin master  # 推送本地代码到远程版本库上git push -u origin master   # 第一次推送本地代码到远程版本库上git push origin master -f   # 强行推送本地代码到远程版本库上， -f表示force， 强行或强制的意思<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-合并冲突"><a href="#10-合并冲突" class="headerlink" title="10. 合并冲突"></a>10. 合并冲突</h4><pre class="line-numbers language-none"><code class="language-none">git add .git commit -m "update"git pull# 如果自动全并成功， 则直接push; git push origin master# 如果自动合并失败， 在手动解决冲突后， 还要add--commit--pushgit add .git commit -m "update"git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-手动解决冲突并提交代码"><a href="#11-手动解决冲突并提交代码" class="headerlink" title="11. 手动解决冲突并提交代码"></a>11. 手动解决冲突并提交代码</h4><pre class="line-numbers language-none"><code class="language-none">git add .git commit -m "update"git pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时报错， 英文提示合并失败， 并告诉你冲突的文件是哪些， 这时需要你手动解决冲突， 找到英文提示合并冲突的文件， 找到以下行：</p><pre class="line-numbers language-none"><code class="language-none">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADCreating a new branch is quick &amp; simple.=======Creating a new branch is quick AND simple.&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>p.s. </p><ul><li><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code> 与 <code>=======</code> 表示本地版本库的冲突内容</li><li><code>=======</code> 与 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</code> 表示远程版本库的冲突内容</li></ul><p>手动解决完冲突后， 再执行提交代码操作：</p><pre class="line-numbers language-none"><code class="language-none">git add .git commit -m "update"git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="12-git检查本地的代码修改情况"><a href="#12-git检查本地的代码修改情况" class="headerlink" title="12. git检查本地的代码修改情况"></a>12. git检查本地的代码修改情况</h4><pre class="line-numbers language-none"><code class="language-none">git diff # 可以查看当前没有add 的内容修改（不在缓冲区的文件变化）git diff --cached # 查看已经add但没有commit 的改动（在缓冲区的文件变化）git diff HEAD # 是上面两条命令的合并<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="13-Git-pull-强行覆盖本地文件"><a href="#13-Git-pull-强行覆盖本地文件" class="headerlink" title="13. Git pull 强行覆盖本地文件"></a>13. Git pull 强行覆盖本地文件</h4><pre class="line-numbers language-none"><code class="language-none">git fetch --allgit reset --hard origin/mastergit pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="14-git-tag-标签-版本-的操作"><a href="#14-git-tag-标签-版本-的操作" class="headerlink" title="14. git tag 标签(版本)的操作"></a>14. git tag 标签(版本)的操作</h4><ul><li>创建标签： <code>git tag 标签名</code></li><li>显示所有标签： <code>git tag</code></li><li>共享所有标签到远程库： <code>git push --tags</code> # p.s. 如果有人克隆或者在线同步你的git仓库的话， 标签也会一并同步了</li><li>删除本地标签： <code>git tag -d 标签名</code></li><li>删除远程标签： <code>git push origin :refs/tags/标签名</code></li><li>检出标签： <code>git checkout 标签名</code></li><li>查看相应标签的版本信息， 并连同显示标签的提交对象： <code>git show 标签名</code></li><li>推送标签： <code>git push origin 标签名</code></li><li>查看提交的历史日志: <code>git log</code></li></ul><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">git tag             # 显示所有的标签git tag v0.1.0      # 本地创建新的标签(版本)git push --tags     # 将本地的所有版本(标签)推送到远程库上(即共享标签)git push origin v0.1.0 # 只推送标签v0.1.0到远程库上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="15-git-branch-分支的操作"><a href="#15-git-branch-分支的操作" class="headerlink" title="15. git branch 分支的操作"></a>15. git branch 分支的操作</h4><pre class="line-numbers language-none"><code class="language-none">git branch            # 显示所有分支git checkout 分支名    # 检出分支/切换到分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="16-查看修改了哪些文件"><a href="#16-查看修改了哪些文件" class="headerlink" title="16. 查看修改了哪些文件"></a>16. 查看修改了哪些文件</h4><pre class="line-numbers language-none"><code class="language-none">git status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="17-查看修改了哪些文件及内容"><a href="#17-查看修改了哪些文件及内容" class="headerlink" title="17. 查看修改了哪些文件及内容"></a>17. 查看修改了哪些文件及内容</h4><pre class="line-numbers language-none"><code class="language-none">git diff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="18-查看源"><a href="#18-查看源" class="headerlink" title="18. 查看源"></a>18. 查看源</h4><pre class="line-numbers language-none"><code class="language-none">git remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="19-删除源"><a href="#19-删除源" class="headerlink" title="19. 删除源"></a>19. 删除源</h4><pre class="line-numbers language-none"><code class="language-none">git remote rm origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="20-添加源"><a href="#20-添加源" class="headerlink" title="20. 添加源"></a>20. 添加源</h4><p>若源<code>https://github.com/xiongxianzhu/qingmi.git</code>, 示例如下:</p><pre class="line-numbers language-none"><code class="language-none">git remote add origin https://github.com/xiongxianzhu/qingmi.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="21-创建并切换分支"><a href="#21-创建并切换分支" class="headerlink" title="21. 创建并切换分支"></a>21. 创建并切换分支</h4><p>创建dev分支，然后切换到dev分支：</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout -b devSwitched to a new branch 'dev'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p><pre class="line-numbers language-none"><code class="language-none">$ git branch dev$ git checkout devSwitched to branch 'dev'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后，用git branch命令查看当前分支：</p><pre class="line-numbers language-none"><code class="language-none">$ git branch* dev  master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个*号。<br>然后，我们就可以在dev分支上正常提交， 示例：</p><pre class="line-numbers language-none"><code class="language-none">$ git add .$ git commit -m 'update'$ git push --set-upstream origin devCounting objects: 4, done.Delta compression using up to 6 threads.Compressing objects: 100% (3/3), done.Writing objects: 100% (4/4), 1.27 KiB | 0 bytes/s, done.Total 4 (delta 2), reused 0 (delta 0)To git@gitlab.com:quwei/docs.git* [new branch]      dev -&gt; devBranch dev set up to track remote branch dev from origin.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="22-合并分支"><a href="#22-合并分支" class="headerlink" title="22. 合并分支"></a>22. 合并分支</h4><p><code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout masterSwitched to branch 'master'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p><pre class="line-numbers language-none"><code class="language-none">$ git merge devUpdating d46f35e..b17d20eFast-forward readme.txt | 1 + 1 file changed, 1 insertion(+)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git merge</code>命令用于合并指定分支到当前分支</p><h4 id="23-删除分支"><a href="#23-删除分支" class="headerlink" title="23. 删除分支"></a>23. 删除分支</h4><p>若合并完成后，不需要dev分支， 就可以放心地删除dev分支了：</p><pre class="line-numbers language-none"><code class="language-none">$ git branch -d devDeleted branch dev (was b17d20e).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除后，查看branch，就只剩下master分支了：</p><pre class="line-numbers language-none"><code class="language-none">$ git branch* master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面是删除本地分支， 若删除远程分支， 如下:</p><pre class="line-numbers language-none"><code class="language-none">git push origin --delete dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以把分支dev从远程库中删除了。</p><h4 id="24-把分支master内容更新到分支dev"><a href="#24-把分支master内容更新到分支dev" class="headerlink" title="24. 把分支master内容更新到分支dev"></a>24. 把分支master内容更新到分支dev</h4><pre class="line-numbers language-none"><code class="language-none">git checkout devgit merge master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="25-重命名分支"><a href="#25-重命名分支" class="headerlink" title="25. 重命名分支"></a>25. 重命名分支</h4><p>查看所有分支， 将本地分支<code>dev</code>重命名为<code>xx</code>， 删除远程分支， 将本地分支推送到远程库:</p><pre class="line-numbers language-none"><code class="language-none">git branchgit branch -m dev xxgit push --delete origin devgit push origin xx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="26-分支小结"><a href="#26-分支小结" class="headerlink" title="26. 分支小结"></a>26. 分支小结</h4><p>Git鼓励大量使用分支：</p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除本地分支：<code>git branch -d &lt;name&gt;</code></p><p>删除远程分支：<code>git push origin --delete &lt;name&gt;</code></p><h4 id="27-禁用git-filemode"><a href="#27-禁用git-filemode" class="headerlink" title="27. 禁用git filemode"></a>27. 禁用git filemode</h4><pre class="line-numbers language-none"><code class="language-none">git config core.filemode false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或编辑仓库下的<code>仓库名/.git/config</code>文件， <code>git config -e</code>or<code>vim .git/config</code></p><pre class="line-numbers language-none"><code class="language-none">[core]    filemode = false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="28-修改源"><a href="#28-修改源" class="headerlink" title="28. 修改源"></a>28. 修改源</h4><pre class="line-numbers language-none"><code class="language-none">git remote set-url origin [NEW_URL]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或在项目根目录下， 修改配置文件：</p><pre class="line-numbers language-none"><code class="language-none">cd .gitvim config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>内容如下：</p><pre class="line-numbers language-none"><code class="language-none">[core]    repositoryformatversion = 0    filemode = false    bare = false    logallrefupdates = true    ignorecase = true    precomposeunicode = true[remote "origin"]    # 修改成新的仓库地址    url = git@bitbucket.org:zhuxiongxian/blog.git    fetch = +refs/heads/*:refs/remotes/origin/*[branch "master"]    remote = origin    merge = refs/heads/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="29-简写git-push-origin-分支名"><a href="#29-简写git-push-origin-分支名" class="headerlink" title="29. 简写git push origin 分支名"></a>29. 简写git push origin 分支名</h4><p>如当前分支名为 <code>xx</code>， 想在当前分支<code>xx</code>下简写<code>git push origin xx</code>为<code>git push</code>， 则：</p><pre class="line-numbers language-none"><code class="language-none">git push --set-upstream origin xx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中， <code>xx</code>是分支名， 您需要替换为您的分支名即可。</p><h4 id="30-撤销本地的修改"><a href="#30-撤销本地的修改" class="headerlink" title="30. 撤销本地的修改"></a>30. 撤销本地的修改</h4><pre class="line-numbers language-none"><code class="language-none">git restore 文件名git restore .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="31-fatal-拒绝合并无关的历史"><a href="#31-fatal-拒绝合并无关的历史" class="headerlink" title="31. fatal: 拒绝合并无关的历史"></a>31. fatal: 拒绝合并无关的历史</h4><p>使用参数<code>--allow-unrelated-histories</code>:</p><pre class="line-numbers language-none"><code class="language-none">$ git merge mainfatal: 拒绝合并无关的历史$ git merge main --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> ssh-keygen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装与卸载MongoDB</title>
      <link href="2018/02/01/install-or-uninstall-mongodb-on-linux/"/>
      <url>2018/02/01/install-or-uninstall-mongodb-on-linux/</url>
      
        <content type="html"><![CDATA[<p>官方安装MongoDB英文教程： <a href="https://docs.mongodb.com/getting-started/shell/installation/">https://docs.mongodb.com/getting-started/shell/installation/</a></p><p>p.s. 本文针对64位的linux发行版本。</p><h4 id="1-Ubuntu下安装或卸载MongoDB"><a href="#1-Ubuntu下安装或卸载MongoDB" class="headerlink" title="1. Ubuntu下安装或卸载MongoDB"></a>1. Ubuntu下安装或卸载MongoDB</h4><h5 id="1-1-包管理系统APT添加MongoDB公钥key"><a href="#1-1-包管理系统APT添加MongoDB公钥key" class="headerlink" title="1.1. 包管理系统APT添加MongoDB公钥key"></a>1.1. 包管理系统APT添加MongoDB公钥key</h5><p>使用ubuntu的包管理系统(即dpkg和APT)导入公钥：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>MongoDB的公钥Key会更新， 最新的公钥只能在官网Ubuntu系统下安装MongoDB的页面中查找：<br><a href="https://docs.mongodb.com/master/tutorial/install-mongodb-on-ubuntu/">https://docs.mongodb.com/master/tutorial/install-mongodb-on-ubuntu/</a></p><p>任选以上其中一个公钥， 执行命令回车添加即可。</p><h5 id="1-2-创建MongoDB软件源文件"><a href="#1-2-创建MongoDB软件源文件" class="headerlink" title="1.2. 创建MongoDB软件源文件"></a>1.2. 创建MongoDB软件源文件</h5><p>添加MongoDB软件源：</p><pre class="line-numbers language-none"><code class="language-none">$ vim /etc/apt/sources.list.d/mongodb.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>mongodb.list</code>文件内容由ubuntu的版本决定。 ubuntu版本的命令规则是根据正式版发行的年月命名， ubuntu16.04也就意味着2016年04月发行。 除此之处， 每个版本的ubuntu还有一个用2个英文单词组成的开发代号， 都是动物名称组成。 安装软件源的版本则需要对应一下。</p><p>p.s. ubuntu版本每半年(即6个月)发布一个版本， 每2年发布一个长期支持<code>LTS(Long Term Support)</code>版本。</p><p>ubuntu12.04版本的代号是穿山甲 <code>Precise Pangolin</code>, 则输入内容是：</p><pre class="line-numbers language-none"><code class="language-none">deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.6 multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ubuntu14.04版本的代号是塔尔羊 <code>Trusty Tahr</code>, 则输入内容是：</p><pre class="line-numbers language-none"><code class="language-none">deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.6 multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ubuntu16.04版本的代号是地松鼠 <code>Xenial Xerus</code>, 则输入内容是：</p><pre class="line-numbers language-none"><code class="language-none">deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>p.s. 知道了配置软件源的原理之后， 这里提供了一种快速配置的方法， 不需要文本编辑器 <code>vim</code> 输入， <code>echo</code> 和 <code>tee</code> 命令可以把内容输入到文件中。 <code>lsb_release -sc</code> 则可以自动提取版本动物名， 所以以下命令可以替代上面的 <code>vim</code> 输入内容的方法。</p><p>直接输入命令：</p><pre class="line-numbers language-none"><code class="language-none">echo "deb https://repo.mongodb.org/apt/ubuntu "$(lsb_release -sc)"/mongodb-org/3.6 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb.list```  官方MongoDB的软件源仓库可以对大陆用户不太友好， 建议使用阿里云的MongoDB软件源仓库， 执行以下命令：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>echo “deb <a href="http://mirrors.aliyun.com/mongodb/apt/ubuntu">http://mirrors.aliyun.com/mongodb/apt/ubuntu</a> “$(lsb_release -sc)”/mongodb-org/3.6 multiverse” | sudo tee /etc/apt/sources.list.d/mongodb.list</p><pre class="line-numbers language-none"><code class="language-none">若想删除mongodb软件源， 则直接用`rm`命令从软件源目录下删除`mongodb.list`， 如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$ sudo rm -fr /etc/apt/sources.list.d/mongodb.list</p><pre class="line-numbers language-none"><code class="language-none">##### 1.3. 更新软件源ubuntu的软件源文件都存放在目录 `/etc/apt/sources.list.d/` 下， 执行以下命令扫描新增的mongodb软件源文件`mongodb.list`：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>$ sudo apt-get update</p><pre class="line-numbers language-none"><code class="language-none">##### 1.4. 安装MongoDB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$ sudo apt-get install -y mongodb-org</p><pre class="line-numbers language-none"><code class="language-none">参数`-y`表示yes, 意味着中途不用确认， 直接自动安装。##### 1.5. 卸载MongoDB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>$ sudo service mongod stop<br>$ sudo apt-get purge mongodb-org*</p><p>$ sudo apt-get autoremove<br>$ sudo rm -r /var/log/mongodb (日志目录)<br>$ sudo rm -r /var/lib/mongodb (数据目录)</p><pre class="line-numbers language-none"><code class="language-none">##### 1.6. MongoDB相关说明- mongodb默认服务名为： `mongod`- mongodb默认的数据文件目录为： `/var/lib/mongodb`- mongodb默认的日志文件目录为： `/var/log/mongodb`- mongodb默认的配置文件为： `/etc/mongod.conf`- mongodb默认的端口为：`27017`- 配置文件可指定日志(systemLog.path)和数据文件目录(storage.dbPath)， 以及端口等。- mongodb默认的运行日志文件： `/var/log/mongodb/mongod.log`##### 1.7. 设置MongoDB服务开机启动安装mongodb3.6版本默认会在目录`/lib/systemd/system/`下创建MongoDB的服务文件`mongod.service`， 如果没有则手动在`/lib/systemd/system/`下创建文件`mongod.service`， 如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="cd-lib-systemd-system"><a href="#cd-lib-systemd-system" class="headerlink" title="cd /lib/systemd/system/"></a>cd /lib/systemd/system/</h1><h1 id="vim-mongod-service"><a href="#vim-mongod-service" class="headerlink" title="vim mongod.service"></a>vim mongod.service</h1><pre class="line-numbers language-none"><code class="language-none">`mongod.service`文件内容如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[Unit]<br>Description=High-performance, schema-free document-oriented database<br>After=network.target<br>Documentation=<a href="https://docs.mongodb.org/manual">https://docs.mongodb.org/manual</a></p><p>[Service]<br>User=mongodb<br>Group=mongodb<br>ExecStart=/usr/bin/mongod –config /etc/mongod.conf<br>PIDFile=/var/run/mongodb/mongod.pid</p><h1 id="file-size"><a href="#file-size" class="headerlink" title="file size"></a>file size</h1><p>LimitFSIZE=infinity</p><h1 id="cpu-time"><a href="#cpu-time" class="headerlink" title="cpu time"></a>cpu time</h1><p>LimitCPU=infinity</p><h1 id="virtual-memory-size"><a href="#virtual-memory-size" class="headerlink" title="virtual memory size"></a>virtual memory size</h1><p>LimitAS=infinity</p><h1 id="open-files"><a href="#open-files" class="headerlink" title="open files"></a>open files</h1><p>LimitNOFILE=64000</p><h1 id="processes-threads"><a href="#processes-threads" class="headerlink" title="processes/threads"></a>processes/threads</h1><p>LimitNPROC=64000</p><h1 id="locked-memory"><a href="#locked-memory" class="headerlink" title="locked memory"></a>locked memory</h1><p>LimitMEMLOCK=infinity</p><h1 id="total-threads-user-kernel"><a href="#total-threads-user-kernel" class="headerlink" title="total threads (user+kernel)"></a>total threads (user+kernel)</h1><p>TasksMax=infinity<br>TasksAccounting=false</p><h1 id="Recommended-limits-for-for-mongod-as-specified-in"><a href="#Recommended-limits-for-for-mongod-as-specified-in" class="headerlink" title="Recommended limits for for mongod as specified in"></a>Recommended limits for for mongod as specified in</h1><h1 id="http-docs-mongodb-org-manual-reference-ulimit-recommended-settings"><a href="#http-docs-mongodb-org-manual-reference-ulimit-recommended-settings" class="headerlink" title="http://docs.mongodb.org/manual/reference/ulimit/#recommended-settings"></a><a href="http://docs.mongodb.org/manual/reference/ulimit/#recommended-settings">http://docs.mongodb.org/manual/reference/ulimit/#recommended-settings</a></h1><p>[Install]<br>WantedBy=multi-user.target</p><pre class="line-numbers language-none"><code class="language-none">或简化为：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[Unit]<br>Description=High-performance, schema-free document-oriented database<br>After=network.target<br>Documentation=<a href="https://docs.mongodb.org/manual">https://docs.mongodb.org/manual</a></p><p>[Service]<br>User=mongodb<br>Group=mongodb<br>ExecStart=/usr/bin/mongod –quiet –config /etc/mongod.conf</p><p>[Install]<br>WantedBy=multi-user.target</p><pre class="line-numbers language-none"><code class="language-none">`:wq`保存退出vim编辑文件`mongod.service`， 更新`systemctl`服务：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="systemctl-daemon-reload"><a href="#systemctl-daemon-reload" class="headerlink" title="systemctl daemon-reload"></a>systemctl daemon-reload</h1><pre class="line-numbers language-none"><code class="language-none">MongoDB的服务名为`mongod`, 执行以下命令实现开机启动：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="systemctl-start-mongod"><a href="#systemctl-start-mongod" class="headerlink" title="systemctl start mongod"></a>systemctl start mongod</h1><h1 id="systemctl-enable-mongod"><a href="#systemctl-enable-mongod" class="headerlink" title="systemctl enable mongod"></a>systemctl enable mongod</h1><p>Created symlink from /etc/systemd/system/multi-user.target.wants/mongod.service to /lib/systemd/system/mongod.service.<br>$ sudo update-rc.d -f mongod defaults</p><pre class="line-numbers language-none"><code class="language-none">检测MongoDB服务`mongod`是否以端口`27017`启动：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="netstat-plntu"><a href="#netstat-plntu" class="headerlink" title="netstat -plntu"></a>netstat -plntu</h1><p>或</p><h1 id="ps-aux-grep-mongod"><a href="#ps-aux-grep-mongod" class="headerlink" title="ps aux|grep mongod"></a>ps aux|grep mongod</h1><p>或</p><h1 id="lsof-i-27017"><a href="#lsof-i-27017" class="headerlink" title="lsof -i:27017"></a>lsof -i:27017</h1><p>或 </p><h1 id="pgrep-mongo-l-注意：-l是英文字母l，不是阿拉伯数字1，-显示进程号和进程名"><a href="#pgrep-mongo-l-注意：-l是英文字母l，不是阿拉伯数字1，-显示进程号和进程名" class="headerlink" title="pgrep mongo -l # 注意：-l是英文字母l，不是阿拉伯数字1， 显示进程号和进程名"></a>pgrep mongo -l # 注意：-l是英文字母l，不是阿拉伯数字1， 显示进程号和进程名</h1><p>1095 mongod</p><pre class="line-numbers language-none"><code class="language-none">查看MongoDB版本：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$ mongod –version<br>db version v3.6.2<br>git version: 489d177dbd0f0420a8ca04d39fd78d0a2c539420<br>OpenSSL version: OpenSSL 1.0.2g  1 Mar 2016<br>allocator: tcmalloc<br>modules: none<br>build environment:<br>    distmod: ubuntu1604<br>    distarch: x86_64<br>    target_arch: x86_64</p><pre class="line-numbers language-none"><code class="language-none">删除mongod开机启动执行命令：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$ sudo update-rc.d -f mongod remove</p><pre class="line-numbers language-none"><code class="language-none">#### 2. Centos下安装或卸载MongoDB[install-mongodb-on-red-hat](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/)##### 2.1. 安装MongoDB当前最新稳定版本为`3.6.5`， 则选择安装最新稳定版的mongodb安装mongodb, 会安装软件包`mongodb-org`及其依赖包`mongodb-org-server`、`mongodb-org-mongos`、`mongodb-org-shell`、`mongodb-org-tools`。创建MongoDB软件源文件 `/etc/yum.repos.d/mongodb-org-3.6.repo`， 其内容为：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[mongodb-org-3.6]<br>name=MongoDB Repository<br>baseurl=<a href="https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.6/x86_64/">https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.6/x86_64/</a><br>gpgcheck=1<br>enabled=1<br>gpgkey=<a href="https://www.mongodb.org/static/pgp/server-3.6.asc">https://www.mongodb.org/static/pgp/server-3.6.asc</a></p><pre class="line-numbers language-none"><code class="language-none">更新yum缓存， 并安装mongodb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>$ sudo yum update<br>$ sudo yum install -y mongodb-org<br>$ mongo –version<br>MongoDB shell version v3.6.5<br>git version: a20ecd3e3a174162052ff99913bc2ca9a839d618<br>OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013<br>allocator: tcmalloc<br>modules: none<br>build environment:<br>    distmod: rhel70<br>    distarch: x86_64<br>    target_arch: x86_64</p><pre class="line-numbers language-none"><code class="language-none">##### 2.2. 卸载MongoDB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$ sudo systemctl stop mongod  // sudo service mongod stop<br>$ sudo yum erase $(rpm -qa | grep mongodb-org)<br>$ sudo rm -r /var/log/mongodb<br>$ sudo rm -r /var/lib/mongo</p><pre class="line-numbers language-none"><code class="language-none">##### 2.3. 设置MongoDB服务开机启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$ sudo chkconfig mongod on</p><pre class="line-numbers language-none"><code class="language-none">##### 2.4. mongodb服务管理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$ sudo systemctl start mongod   // 开启mongod服务<br>$ sudo systemctl restart mongod // 重启mongod服务<br>$ sudo systemctl stop mongod    // 停止mongod服务</p><p>```</p><p>相关阅读：</p><ul><li><a href="https://zhuxiongxian.cc/2017/06/23/mongodb-shell-common-commands/">mongodb shell常用命令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mongodb </tag>
            
            <tag> nosql </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用命令</title>
      <link href="2018/01/26/hexo-command/"/>
      <url>2018/01/26/hexo-command/</url>
      
        <content type="html"><![CDATA[<p>hexo中文官网： <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a><br>hexo中文官方文档： <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h4 id="1-hexo安装"><a href="#1-hexo安装" class="headerlink" title="1. hexo安装"></a>1. hexo安装</h4><pre class="line-numbers language-none"><code class="language-none">$ npm install hexo -g或$ cnpm i hexo -g    # cnpm代替npm时<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>p.s. </p><ul><li>需要提前安装nodejs环境， 配置node, npm环境变量。</li></ul><h4 id="2-hexo新建博客"><a href="#2-hexo新建博客" class="headerlink" title="2. hexo新建博客"></a>2. hexo新建博客</h4><pre class="line-numbers language-none"><code class="language-none">$ hexo init blog或$ mkdir blog$ cd blog$ hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>p.s. </p><ul><li>生成blog目录，blog目录包含node_modules、scaffolds、source、themes、.gitignore、_config.yml、db.json、package.json，其中 _config.yml 为全局配置文件。</li></ul><h4 id="3-hexo服务"><a href="#3-hexo服务" class="headerlink" title="3. hexo服务"></a>3. hexo服务</h4><pre class="line-numbers language-none"><code class="language-none">$ hexo server       # 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）$ hexo s$ hexo s --debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>p.s.</p><ul><li><code>hexo server</code>简写成<code>heox s</code></li><li>默认端口是<code>4000</code></li><li>参数<code>--debug</code>调试模式， 可以显示运行日志信息</li></ul><h4 id="4-新建文件夹"><a href="#4-新建文件夹" class="headerlink" title="4. 新建文件夹"></a>4. 新建文件夹</h4><pre class="line-numbers language-none"><code class="language-none">$ hexo new page folder$ hexo new page "folder"$ hexo n page folder$ hexo n page "folder"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>p.s.</p><ul><li><code>hexo new</code>简写成<code>hexo n</code>， 推荐使用简写， 还一句话， 方便简洁高效， 怎么方便怎么来</li><li>格式： <code>hexo n page 目录名</code>， 可以不加双引号， 若有特定符号， 建议加上双引号</li></ul><h4 id="5-新建文章"><a href="#5-新建文章" class="headerlink" title="5. 新建文章"></a>5. 新建文章</h4><pre class="line-numbers language-none"><code class="language-none">$ hexo new file$ hexo new "file"$ hexo n file$ hexo n "file"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>p.s.</p><ul><li>格式： <code>hexo n 文件名/文章名</code></li><li>新建的文件会保存在 <code>_posts</code> 目录里</li></ul><h4 id="6-新建草稿文章"><a href="#6-新建草稿文章" class="headerlink" title="6. 新建草稿文章"></a>6. 新建草稿文章</h4><pre class="line-numbers language-none"><code class="language-none">$ hexo new draft file$ hexo new draft "file"$ hexo n draft file$ hexo n draft "file"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>p.s.</p><ul><li>格式： <code>hexo n draft 文件名/草稿文件名</code></li><li>新建的草稿文章会保存在 <code>_drafts</code> 目录里</li><li>草稿默认不会显示在页面中，您可在执行时加上 –draft 参数，或是把 render_drafts 参数设为 true 来预览草稿</li></ul><h4 id="7-发表草稿文章"><a href="#7-发表草稿文章" class="headerlink" title="7. 发表草稿文章"></a>7. 发表草稿文章</h4><pre class="line-numbers language-none"><code class="language-none">$ hexo publish [layout] file$ hexo p file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>p.s. </p><ul><li>格式： <code>hexo p 文件名/草稿文件名</code></li><li><code>hexo publish</code>简写为<code>hexo p</code></li></ul><p>如： <code>hexp n [file]</code>创建了新文章， 在编辑完后， 再执行<code>hexp p [file]</code>发表草稿文章:</p><pre class="line-numbers language-none"><code class="language-none">$ hexo n "ubuntu16.04安装mysql5.7.24"$ hexo p "ubuntu16.04安装mysql5.7.24"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="8-生成静态网页"><a href="#8-生成静态网页" class="headerlink" title="8. 生成静态网页"></a>8. 生成静态网页</h4><p>使用 Hexo 生成静态文件快速而且简单。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo clean                # 清除缓存 网页正常情况下可以忽略此条命令$ hexo generate             # 生成静态页面至public目录$ hexo g$ hexo generate --watch     # 参数--watch表示监视文件变动$ hexo g --watch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>p.s.</p><ul><li><code>hexo generate</code>简写为<code>hexo g</code></li><li>参数<code>--watch</code>是使Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</li></ul><h4 id="9-部署"><a href="#9-部署" class="headerlink" title="9. 部署"></a>9. 部署</h4><pre class="line-numbers language-none"><code class="language-none">$ hexo deploy      #将.deploy目录部署到代码托管库服务器上$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>p.s.</p><ul><li><code>hexo deploy</code>简写为<code>hexo d</code></li></ul><h4 id="10-生成后并推送部署到服务器上"><a href="#10-生成后并推送部署到服务器上" class="headerlink" title="10. 生成后并推送部署到服务器上"></a>10. 生成后并推送部署到服务器上</h4><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo generate --deploy$ hexo deploy --generate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>简写：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo g -d$ hexo d -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现简单的socket通讯</title>
      <link href="2018/01/22/python-simple-socket/"/>
      <url>2018/01/22/python-simple-socket/</url>
      
        <content type="html"><![CDATA[<p>Talk is cheap, show me the code!!!</p><p>服务端<code>socket_server_demo01.py</code>代码如下：</p><pre class="line-numbers language-none"><code class="language-none"># coding: utf-8"""    socket 服务器端    基于套接字socket的网络通信"""import socket                   # 导入socket模块# from time import ctimeimport time# HOST = socket.gethostname()   # 主机名, '127.0.0.1' or 'localhost'HOST = '127.0.0.1'              # 主机名, '127.0.0.1' or 'localhost'PORT = 21929                    # 设置端口号BUFSIZ = 1024ADDR = (HOST, PORT)s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   # 创建socket对象s.bind(ADDR)                    # 将地址(主机名/端口号对)绑定到套接字上s.listen(5)                     # 设置并启动TCP监听器while True:    print 'waiting for connection...'    c, addr = s.accept()        # 被动接受TCP客户端连接， 一直等待直到连接到达(阻塞)    print '...connected from: ', ADDR     # 打印连接地址    while True:        data = c.recv(BUFSIZ)   # 接收TCP消息        if not data:            break        # c.send('[%s] %s' % (ctime(), data))        # c.send('[{}] {}'.format(str(ctime()), data))    # 发送TCP消息        c.send('[{}] {}'.format(time.strftime("%Y-%m-%d %H:%M:%S %A", \                time.localtime()), data))    # 发送TCP消息    c.close()               # 关闭套接字(关闭连接)c.close()                   # 关闭套接字(关闭连接)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端<code>socket_client_demo01.py</code>代码如下：</p><pre class="line-numbers language-none"><code class="language-none"># coding: utf-8"""    socket 客户端    基于套接字socket的网络通信"""import socket                   # 导入socket模块# HOST = socket.gethostname()   # 主机名, '127.0.0.1' or 'localhost'HOST = '127.0.0.1'              # 主机名, '127.0.0.1' or 'localhost'PORT = 21929                    # 设置端口BUFSIZ = 1024ADDR = (HOST, PORT)             # 地址， `主机名+端口` 对s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   # 创建socket对象s.connect(ADDR)                 # 主动发起TCP服务器连接while True:    data = raw_input('&gt; ')      # 待输入就绪状态    if not data:        break    s.send(data)                # 发送输入的数据    data = s.recv(BUFSIZ)       # 接收TCP消息    if not data:        break                   # 若无数据输入则跳出循环    print datas.close()                       # 关闭套接字(关闭连接)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://zhuxiongxian.cc/img/article/Selection_027.png" alt="python socket网络通讯"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> socket </tag>
            
            <tag> 通讯 </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python排列组合算法应用01</title>
      <link href="2018/01/18/python-permutation-combination-demo01/"/>
      <url>2018/01/18/python-permutation-combination-demo01/</url>
      
        <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h4><p>每天早上打开电脑， 第一时间都会习惯性地看看今天推荐的资讯文章，时不时会看到类似于<code>小学生难题， 只有%3的人能做对</code>字眼的文章， 真的有这么难吗？</p><p>细心的程序猿/媛会发现， 这无非是编程入门最基本的题目罢了。今天来看看以下这道<code>小学题</code>吧！</p><pre class="line-numbers language-none"><code class="language-none">请将4, 5, 6, 7, 9, 19六个数分别填入A-F空白框中， 每个数在每条算式中只能填一次。满足： A + B - C = D - E - F。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如下图：</p><p><img src="https://zhuxiongxian.cc/img/article/83779393.jpg" alt="小学题目"></p><h4 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2. 示例代码"></a>2. 示例代码</h4><p>思路： </p><ul><li>条件<code>A+B-C=D-E-F</code>即<code>A+B+E+F=D+C</code></li><li>等号两边相加为<code>A+B+C+D+E+F</code> = 4+5+6+7+9+19 = 50</li><li>即A+B+E+F=D+C=25, 所以D的值为6或19, C的值为19或6</li><li>相加或相减， 两个加数或两个减数之间是等位的， 比如1+3可以写成3+1, 9-3-2可以写成9-2-3</li><li>则满足条件<code>A+B-C=D-E-F</code>的写法可以通过排列算法遍历得到结果</li><li>由上面的条件， 通过数学中的排列组合里的公式， 得知结果的种数等于[A, B, E, F]的排列种数 <code>A(4, 4)</code> 与[C, D]的排列种数 <code>A(2, 2)</code> 的乘积， 即<code>A(4, 4)</code> * <code>A(2, 2)</code> = 24 * 2 = 48，即满足条件的排列的写法有48种。</li></ul><p>Talk is cheap, show me the code!!!</p><p>itertools_demo.py内容如下：</p><pre class="line-numbers language-none"><code class="language-none"># coding: utf-8import itertoolsdef permutation(arr, n):    """ 排列算法 """    return list(itertools.permutations(arr, n))def combination(arr, n):    """ 组合算法 """    return list(itertools.combinations(arr, n))def go():    """         请将4, 5, 6, 7, 9, 19六个数分别填入A-F空白框中， 每个数在每条算式中只能填一次。        满足： A + B - C = D - E - F    """    arr = [4, 5, 6, 7, 9, 19]    all_list = permutation(arr, 6)    count = 0    for one_list in all_list:        if one_list[0] + one_list[1] - one_list[2] == \            one_list[3] - one_list[4] - one_list[5]:            # print "%s + %s - %s = %s - %s - %s" % tuple(i for i in one_list)            # print('{0[0]} + {0[1]} - {0[2]} = {0[3]} - {0[4]} - {0[5]}'.format(one_list))            print('{0[0]:&gt;2} + {0[1]:&gt;2} - {0[2]:&gt;2} = {0[3]:&gt;2} - {0[4]:&gt;2} - {0[5]:&gt;2}'.format(one_list))            count += 1    print "共有%s种排列的写法。" % countif __name__ == "__main__":    go()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">$ python itertools_demo.py  4 +  5 -  6 = 19 -  7 -  9 4 +  5 -  6 = 19 -  9 -  7 4 +  5 - 19 =  6 -  7 -  9 4 +  5 - 19 =  6 -  9 -  7 4 +  7 -  6 = 19 -  5 -  9 4 +  7 -  6 = 19 -  9 -  5 4 +  7 - 19 =  6 -  5 -  9 4 +  7 - 19 =  6 -  9 -  5 4 +  9 -  6 = 19 -  5 -  7 4 +  9 -  6 = 19 -  7 -  5 4 +  9 - 19 =  6 -  5 -  7 4 +  9 - 19 =  6 -  7 -  5 5 +  4 -  6 = 19 -  7 -  9 5 +  4 -  6 = 19 -  9 -  7 5 +  4 - 19 =  6 -  7 -  9 5 +  4 - 19 =  6 -  9 -  7 5 +  7 -  6 = 19 -  4 -  9 5 +  7 -  6 = 19 -  9 -  4 5 +  7 - 19 =  6 -  4 -  9 5 +  7 - 19 =  6 -  9 -  4 5 +  9 -  6 = 19 -  4 -  7 5 +  9 -  6 = 19 -  7 -  4 5 +  9 - 19 =  6 -  4 -  7 5 +  9 - 19 =  6 -  7 -  4 7 +  4 -  6 = 19 -  5 -  9 7 +  4 -  6 = 19 -  9 -  5 7 +  4 - 19 =  6 -  5 -  9 7 +  4 - 19 =  6 -  9 -  5 7 +  5 -  6 = 19 -  4 -  9 7 +  5 -  6 = 19 -  9 -  4 7 +  5 - 19 =  6 -  4 -  9 7 +  5 - 19 =  6 -  9 -  4 7 +  9 -  6 = 19 -  4 -  5 7 +  9 -  6 = 19 -  5 -  4 7 +  9 - 19 =  6 -  4 -  5 7 +  9 - 19 =  6 -  5 -  4 9 +  4 -  6 = 19 -  5 -  7 9 +  4 -  6 = 19 -  7 -  5 9 +  4 - 19 =  6 -  5 -  7 9 +  4 - 19 =  6 -  7 -  5 9 +  5 -  6 = 19 -  4 -  7 9 +  5 -  6 = 19 -  7 -  4 9 +  5 - 19 =  6 -  4 -  7 9 +  5 - 19 =  6 -  7 -  4 9 +  7 -  6 = 19 -  4 -  5 9 +  7 -  6 = 19 -  5 -  4 9 +  7 - 19 =  6 -  4 -  5 9 +  7 - 19 =  6 -  5 -  4共有48种排列的写法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 排列 </tag>
            
            <tag> 组合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树前中后序遍历快速入门</title>
      <link href="2018/01/08/binary-tree-traversal/"/>
      <url>2018/01/08/binary-tree-traversal/</url>
      
        <content type="html"><![CDATA[<h4 id="1-遍历顺序"><a href="#1-遍历顺序" class="headerlink" title="1. 遍历顺序"></a>1. 遍历顺序</h4><p>遍历是对树的一种最基本的运算，所谓遍历二叉树，就是按一定的规则和顺序走遍二叉树的所有结点，使每一个结点都被访问一次，而且只被访问一次。由于二叉树是<code>非线性结构</code>，因此，树的遍历实质上是将二叉树的各个结点转换成为一个<code>线性序列</code>来表示。</p><p>p.s. 前序遍历又叫先序遍历.</p><p>前中后序遍历顺序如下：</p><blockquote><p>前序遍历：根节点-&gt;左子树-&gt;右子树 (根左右)</p></blockquote><blockquote><p>中序遍历：左子树-&gt;根节点-&gt;右子树 (左根右)</p></blockquote><blockquote><p>后序遍历：左子树-&gt;右子树-&gt;根节点 (左右根)</p></blockquote><h5 id="1-1-前序遍历"><a href="#1-1-前序遍历" class="headerlink" title="1.1. 前序遍历"></a>1.1. 前序遍历</h5><p>前序遍历： 先遍历根结点，然后遍历左子树，最后遍历右子树。</p><h5 id="1-2-中序遍历"><a href="#1-2-中序遍历" class="headerlink" title="1.2. 中序遍历"></a>1.2. 中序遍历</h5><p>中序遍历： 先遍历左子树，然后遍历根结点，最后遍历右子树。</p><h5 id="1-3-后序遍历"><a href="#1-3-后序遍历" class="headerlink" title="1.3. 后序遍历"></a>1.3. 后序遍历</h5><p>后序遍历： 先遍历左子树，然后遍历右子树，最后遍历根节点。</p><h5 id="1-4-层次遍历"><a href="#1-4-层次遍历" class="headerlink" title="1.4. 层次遍历"></a>1.4. 层次遍历</h5><p>层次遍历： 即按照层次访问，通常用队列来做。访问根，访问子女，再访问子女的子女（越往后的层次越低）（两个子女的级别相同）。</p><h4 id="2-画二叉树"><a href="#2-画二叉树" class="headerlink" title="2. 画二叉树"></a>2. 画二叉树</h4><p>前序（前根序列）： 根左右<br>中序（中根序列）： 左根右<br>后序（后根序列）： 左右根</p><p>只要知道中序遍历顺序， 再加上前序或后序任一个遍历顺序即可确定唯一的二叉树。</p><p>画二叉树口诀： </p><pre class="line-numbers language-none"><code class="language-none">前后序定根， 中序定左右;前序前找根， 后序后找根。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如已知：</p><pre class="line-numbers language-none"><code class="language-none">中根序列： C, B, D, E, A, G, I, H, J, F后根序列： C, E, D, B, I, J, H, G, F, A画出二叉树并写出前根序列。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解答思路：</p><pre class="line-numbers language-none"><code class="language-none">1. 根据前序或后序先确定根;2. 再根据中序确定左右子树。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>按递归思想， 根据口诀逐一分步成思路中的1, 2步， 即可快速画出如下二叉树：</p><p><img src="https://zhuxiongxian.cc/img/article/binary_tree_1.png" alt="二叉树"></p><p>由得出的二叉树可知前根序列为：A, B, C, D, E, F, G, H, I, J</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 前序 </tag>
            
            <tag> 中序 </tag>
            
            <tag> 后序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装jdk8</title>
      <link href="2017/12/13/linux-jdk8/"/>
      <url>2017/12/13/linux-jdk8/</url>
      
        <content type="html"><![CDATA[<p>本文安装jdk1.8适用于linux的主流发行版本如ubuntu, centos等。</p><h4 id="1-jdk8下载"><a href="#1-jdk8下载" class="headerlink" title="1. jdk8下载"></a>1. jdk8下载</h4><p>jdk8下载地址：</p><pre class="line-numbers language-none"><code class="language-none">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>wget命令下载：</p><pre class="line-numbers language-none"><code class="language-none">$ wget -c "http://download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/jdk-8u151-linux-x64.tar.gz?AuthParam=1513164187_944e5381813d3894c7b0be252df22984"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件重命名得到<code>jdk-8u151-linux-x64.tar.gz</code>:</p><pre class="line-numbers language-none"><code class="language-none"># mv jdk-8u151-linux-x64.tar.gz?AuthParam=1513164187_944e5381813d3894c7b0be252df22984 jdk-8u151-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-解压缩"><a href="#2-解压缩" class="headerlink" title="2. 解压缩"></a>2. 解压缩</h4><p>解压<code>jdk-8u151-linux-x64.tar.gz</code>得到目录<code>jdk1.8.0_151</code>:</p><pre class="line-numbers language-none"><code class="language-none"># tar -xzvf jdk-8u121-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-指定jdk的安装目录"><a href="#3-指定jdk的安装目录" class="headerlink" title="3. 指定jdk的安装目录"></a>3. 指定jdk的安装目录</h4><p>创建目录<code>/usr/java/</code></p><pre class="line-numbers language-none"><code class="language-none"># mkdir /usr/java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移动目录<code>jdk1.8.0_151</code>到<code>/usr/java/</code>下：</p><pre class="line-numbers language-none"><code class="language-none"># mv jdk1.8.0_151/ /usr/java/# cd /usr/java/# lsjdk1.8.0_151<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量"></a>4. 配置环境变量</h4><p>修改文件<code>/etc/profile</code></p><pre class="line-numbers language-none"><code class="language-none"># vim /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>/etc/profile</code>文件内容最后追加:</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/usr/java/jdk1.8.0_151export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>:wq</code>保存退出<br>使文件<code>/etc/profile</code>重新生效</p><pre class="line-numbers language-none"><code class="language-none"># source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-检测jdk8是否成功安装"><a href="#5-检测jdk8是否成功安装" class="headerlink" title="5. 检测jdk8是否成功安装"></a>5. 检测jdk8是否成功安装</h4><pre class="line-numbers language-none"><code class="language-none">$ java -versionjava version "1.8.0_151"Java(TM) SE Runtime Environment (build 1.8.0_151-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6. 注意事项"></a>6. 注意事项</h4><p>对于zsh用户， 在安装配置完jdk后， 还需要注销重新登录系统才能正常使用<code>java</code>等命令。</p><p>这是因为<code>java</code>命令在目录<code>/usr/bin/</code>下， zsh配置文件<code>~/.zshrc</code>需要注销重新登录用户使环境变量生效：</p><p><code>$ vim .bash_profile</code>:</p><pre class="line-numbers language-none"><code class="language-none">export PATH=/bin:/usr/bin:/usr/local/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>激活命令<code>java</code>, 使<code>java</code>命令在每次开机登录系统时在<code>zsh shell</code>下都能生效:</p><pre class="line-numbers language-none"><code class="language-none">$ source .bash_profile$ echo source ~/.bash_profile &gt;&gt; ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若在文件<code>~/.zshrc</code>添加过<code>source ~/.bash_profile</code>， 则无需重新添加。</p><p>Ok， Enjoy it~</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> jdk </tag>
            
            <tag> centos </tag>
            
            <tag> ubuntu </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python fabric自动化部署</title>
      <link href="2017/11/09/python-fabric-automation-deployment/"/>
      <url>2017/11/09/python-fabric-automation-deployment/</url>
      
        <content type="html"><![CDATA[<p>Fabric是一个Python（2.5-2.7）库和命令行工具，可以通过SSH在多个host上批量执行任务, 用于简化应用程序部署或系统管理任务的SSH使用。</p><p>fabric官方英文文档: <a href="http://www.fabfile.org/">http://www.fabfile.org/</a></p><h4 id="1-pip安装"><a href="#1-pip安装" class="headerlink" title="1. pip安装"></a>1. pip安装</h4><p>详见<a href="https://zhuxiongxian.cc/2017/11/09/linux-pip/">linux下pip的安装及常用命令</a></p><h4 id="2-fabric安装"><a href="#2-fabric安装" class="headerlink" title="2. fabric安装"></a>2. fabric安装</h4><p>建议在虚拟环境virtualenv或virtualenvwrapper下安装fabric</p><pre><code># pip install fabric</code></pre><p>安装完fabric即可使用<code>fab</code>命令</p><h4 id="3-fabric变量"><a href="#3-fabric变量" class="headerlink" title="3. fabric变量"></a>3. fabric变量</h4><p><code>from fabric.api import env</code></p><ul><li>env.user： 用于登录服务器的用户名</li><li>env.password： 用户名对应的密码</li><li>env.hosts： 服务器的 IP 地址，也可以是解析到这个 IP 的域名</li><li>env.port： SSH 远程服务器的端口号</li></ul><h4 id="4-fabric传参"><a href="#4-fabric传参" class="headerlink" title="4. fabric传参"></a>4. fabric传参</h4><p>p.s. 默认文件名为<code>fabfile.py</code>文件名不为<code>fabfile.py</code>时需使用<code>-f</code>进行指定.</p><p><code>vim fabfile.py</code>:</p><pre class="line-numbers language-none"><code class="language-none">def hello(name):    print 'Hello %s!'%name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以下两种方式可以传参：</p><pre class="line-numbers language-none"><code class="language-none">$ fab hello:name=fabHello fab! $ fab hello:fabHello fab!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-本地操作"><a href="#5-本地操作" class="headerlink" title="5. 本地操作"></a>5. 本地操作</h4><p>执行本地操作命令使用<code>local</code></p><p><code>vim fabfile.py</code>:</p><pre class="line-numbers language-none"><code class="language-none"># coding: utf-8from fabric.api import localdef test():    local('cd /home/')      local('ls -l|wc -l')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>fab test</code>, 结果如下：</p><pre class="line-numbers language-none"><code class="language-none">$ fab test[localhost] local: cd /home/[localhost] local: ls -l|wc -l16Done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-远程操作"><a href="#6-远程操作" class="headerlink" title="6. 远程操作"></a>6. 远程操作</h4><p>执行远程操作命令使用<code>run</code></p><p>未完， 待续…</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
            <tag> 运维 </tag>
            
            <tag> fabric </tag>
            
            <tag> 自动化部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下pip的安装及常用命令</title>
      <link href="2017/11/09/linux-pip/"/>
      <url>2017/11/09/linux-pip/</url>
      
        <content type="html"><![CDATA[<p>pip是一个用来安装和管理Python包的工具， 它是<code>easy_install</code>的替代品， 也是目前社区的主流工具。</p><p>第三方包主要分布在The Python Package Index (<a href="https://pypi.org/">https://pypi.org</a>) 官方的仓库(简称 PYPI), Github, Bitbucker等代码托管服务上。</p><ul><li>pip官方文档： <a href="https://pip.readthedocs.io/en/stable/">https://pip.readthedocs.io/en/stable/</a></li></ul><h4 id="1-pip安装"><a href="#1-pip安装" class="headerlink" title="1. pip安装"></a>1. pip安装</h4><p>ubuntu下pip安装：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get install python-pip -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>centos下pip安装：</p><pre class="line-numbers language-none"><code class="language-none"># yum install python-pip -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pip脚本一键安装：</p><pre class="line-numbers language-none"><code class="language-none">$ wget c- https://bootstrap.pypa.io/get-pip.py# python get-pip.py# ln -s /usr/local/python2.7/bin/pip /usr/bin/pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>系统自带的pip版本比较低， 可使用pip的自更新来升级：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo pip install pip -U -q    # -q表示静默安装， 减少过程输出<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-检查pip版本"><a href="#2-检查pip版本" class="headerlink" title="2. 检查pip版本"></a>2. 检查pip版本</h4><pre class="line-numbers language-none"><code class="language-none">$ pip -V    # 或 pip --versionpip 9.0.1 from /home/xx/.local/lib/python2.7/site-packages (python 2.7)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-pip用法"><a href="#3-pip用法" class="headerlink" title="3. pip用法"></a>3. pip用法</h4><pre class="line-numbers language-none"><code class="language-none">Usage:     pip &lt;command&gt; [options]Commands:  install                     Install packages.  download                    Download packages.  uninstall                   Uninstall packages.  freeze                      Output installed packages in requirements format.  list                        List installed packages.  show                        Show information about installed packages.  check                       Verify installed packages have compatible dependencies.  search                      Search PyPI for packages.  wheel                       Build wheels from your requirements.  hash                        Compute hashes of package archives.  completion                  A helper command used for command completion.  help                        Show help for commands.General Options:  -h, --help                  Show help.  --isolated                  Run pip in an isolated mode, ignoring                              environment variables and user configuration.  -v, --verbose               Give more output. Option is additive, and can be                              used up to 3 times.  -V, --version               Show version and exit.  -q, --quiet                 Give less output. Option is additive, and can be                              used up to 3 times (corresponding to WARNING,                              ERROR, and CRITICAL logging levels).  --log &lt;path&gt;                Path to a verbose appending log.  --proxy &lt;proxy&gt;             Specify a proxy in the form                              [user:passwd@]proxy.server:port.  --retries &lt;retries&gt;         Maximum number of retries each connection should                              attempt (default 5 times).  --timeout &lt;sec&gt;             Set the socket timeout (default 6000.0 seconds).  --exists-action &lt;action&gt;    Default action when a path already exists:                              (s)witch, (i)gnore, (w)ipe, (b)ackup, (a)bort.  --trusted-host &lt;hostname&gt;   Mark this host as trusted, even though it does                              not have valid or any HTTPS.  --cert &lt;path&gt;               Path to alternate CA bundle.  --client-cert &lt;path&gt;        Path to SSL client certificate, a single file                              containing the private key and the certificate                              in PEM format.  --cache-dir &lt;dir&gt;           Store the cache data in &lt;dir&gt;.  --no-cache-dir              Disable the cache.  --disable-pip-version-check                              Don't periodically check PyPI to determine                              whether a new version of pip is available for                              download. Implied with --no-index.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-pip使用国内源"><a href="#4-pip使用国内源" class="headerlink" title="4. pip使用国内源"></a>4. pip使用国内源</h4><p>详见<a href="https://zhuxiongxian.cc/2017/06/30/using-pypi-domestic-sources-to-speed-up-the-installation-of-pypi-packages/">使用国内Pypi源加速Pypi包的安装</a></p><h4 id="5-pip配合虚拟环境virtualenv或virtualenvwrapper使用"><a href="#5-pip配合虚拟环境virtualenv或virtualenvwrapper使用" class="headerlink" title="5. pip配合虚拟环境virtualenv或virtualenvwrapper使用"></a>5. pip配合虚拟环境virtualenv或virtualenvwrapper使用</h4><p>详见<a href="https://zhuxiongxian.cc/2017/09/28/python-install-virtualenv-and-virtualenvwrapper/">python安装virtualenv和virtualenvwrapper</a></p><h4 id="6-pip常用命令"><a href="#6-pip常用命令" class="headerlink" title="6. pip常用命令"></a>6. pip常用命令</h4><p>pip安装命令：</p><pre class="line-numbers language-none"><code class="language-none"># pip install package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pip升级命令：</p><pre class="line-numbers language-none"><code class="language-none"># pip install --ungrage package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-none"><code class="language-none"># pip install -U package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pip卸载命令：</p><pre class="line-numbers language-none"><code class="language-none"># pip uninstall package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pip自身升级：</p><pre class="line-numbers language-none"><code class="language-none"># pip install -U pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pip指定源安装其他软件包， 如指定<code>豆瓣源</code>安装软件包<code>setuptools</code>：</p><pre class="line-numbers language-none"><code class="language-none"># pip install setuptools -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用requirements格式输出已安装的包, 如下：</p><pre class="line-numbers language-none"><code class="language-none">$ pip freezeBabel==2.5.1click==6.7Flask==0.12.2Flask-Admin==1.5.0Flask-Babel==0.11.2Flask-BabelEx==0.9.3Flask-SQLAlchemy==2.3.2itsdangerous==0.24Jinja2==2.9.6MarkupSafe==1.0pytz==2017.3speaklater==1.3SQLAlchemy==1.1.15Werkzeug==0.12.2WTForms==2.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实际开发中， 我们常常在不同的服务器运行相同的项目， 故需要相同的python环境， 所以我们将python环境的包以<code>requirements</code>格式输出到文件<code>requirements.txt</code>中去：</p><pre class="line-numbers language-none"><code class="language-none">$ pip freeze &gt; requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-pip高级用法"><a href="#7-pip高级用法" class="headerlink" title="7. pip高级用法"></a>7. pip高级用法</h4><p>pip支持自动补全功能， 对于zsh用户非常友好。 zsh用户使用如下命令就可以支持自动补全了：</p><pre class="line-numbers language-none"><code class="language-none">$ pip completion --zsh &gt;&gt; ~/.zprofile$ source ~/.zprofile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者在~/.zshrc里加一行：</p><pre class="line-numbers language-none"><code class="language-none">eval "`pip completion --zsh`"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果使用bash, 则应该执行如下命令：</p><pre class="line-numbers language-none"><code class="language-none">$ pip completion --bash &gt;&gt; ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在输入”pip i<tab>“就会变成”pip install”, 自动补全了install这个子命令。</tab></p><p>OK， Enjoy it~</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux升级python2.6.x到python2.7.x</title>
      <link href="2017/11/09/linux-upgrade-python-version/"/>
      <url>2017/11/09/linux-upgrade-python-version/</url>
      
        <content type="html"><![CDATA[<p>低版本的centos6.x系统自带的python版本为2.6.x, 而平时的开发中都需要python2.7.x版本， 故本文记录下python2.6.x升级到python2.7.x的操作步骤。由于旧版本的python已被深度依赖， 所有不能卸载原有的python, 只能全新安装。</p><h4 id="1-安装依赖库"><a href="#1-安装依赖库" class="headerlink" title="1. 安装依赖库"></a>1. 安装依赖库</h4><pre class="line-numbers language-none"><code class="language-none"># yum install vim gcc make wget -y# yum install openssl-devel zlib-devel readline-devel sqlite-devel -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-源码编译安装python2-7-x"><a href="#2-源码编译安装python2-7-x" class="headerlink" title="2. 源码编译安装python2.7.x"></a>2. 源码编译安装python2.7.x</h4><p>python官网<a href="https://www.python.org/">https://www.python.org/</a>里下载python2.7.x源码最新版本<code>python2.7.14</code>，<br>选择<code>Gzipped source tarball</code>， 下载<code>Python-2.7.14.tgz</code>：</p><pre class="line-numbers language-none"><code class="language-none">$ wget -c https://www.python.org/ftp/python/2.7.14/Python-2.7.14.tgz$ tar -xvf Python-2.7.14.tgz$ cd Python-2.7.14$ ./configure --prefix=/usr/local/python2.7$ make$ sudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-将系统默认python版本变为python2-7"><a href="#3-将系统默认python版本变为python2-7" class="headerlink" title="3. 将系统默认python版本变为python2.7"></a>3. 将系统默认python版本变为python2.7</h4><pre class="line-numbers language-none"><code class="language-none">$ ln -fs /usr/local/python2.7/bin/python2.7 /usr/bin/python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-查看python版本"><a href="#4-查看python版本" class="headerlink" title="4. 查看python版本"></a>4. 查看python版本</h4><pre class="line-numbers language-none"><code class="language-none">$ python –V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-修改yum配置里的python版本为python2-6"><a href="#5-修改yum配置里的python版本为python2-6" class="headerlink" title="5. 修改yum配置里的python版本为python2.6"></a>5. 修改yum配置里的python版本为python2.6</h4><pre class="line-numbers language-none"><code class="language-none"># vim /usr/bin/yum<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将第一行的<code>#!/usr/bin/python</code>修改为系统原有的python版本地址<code>#!/usr/bin/python2.6</code></p><p>至此， 完成了python2.6.x升级到目前最新版本的<code>python2.7.14</code>。<br>OK， Enjoy it~</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux定时任务crontab</title>
      <link href="2017/11/08/linux-timing-task-crontab/"/>
      <url>2017/11/08/linux-timing-task-crontab/</url>
      
        <content type="html"><![CDATA[<p>cron是一个在类Unix操作系统上的任务计划程序。它可以让用户在指定时间段周期性地运行命令或者shell脚本，通常被用在系统的自动化维护或者管理。cron的配置文件称为“crontab”，是“cron table”的简写。</p><h4 id="1-安装crontab"><a href="#1-安装crontab" class="headerlink" title="1. 安装crontab"></a>1. 安装crontab</h4><pre class="line-numbers language-none"><code class="language-none"># yum install vixie-cron# yum install crontabs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>p.s.</p><ul><li>vixie-cron 软件包是 cron 的主程序；</li><li>crontabs 软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。</li><li>cron 的主配置文件是 <code>/etc/crontab</code></li></ul><h4 id="2-crond服务操作命令"><a href="#2-crond服务操作命令" class="headerlink" title="2. crond服务操作命令"></a>2. crond服务操作命令</h4><pre class="line-numbers language-none"><code class="language-none"># service crond start   // 启动服务# service crond stop    // 关闭服务# service crond restart // 重启服务# service crond reload  // 重新载入配置# service crond status  // 查看服务状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在centos系统中加入开机自动启动crond服务:</p><pre class="line-numbers language-none"><code class="language-none"># chkconfig --level 345 crond on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>crond 服务（守护进程）在系统后台运行，并且会持续地检查 <code>/etc/crontab</code> 文件和 <code>/etc/cron.*/</code>目录。它同样也会检查 <code>/var/spool/cron/</code> 目录。</p><h4 id="3-crontab格式"><a href="#3-crontab格式" class="headerlink" title="3. crontab格式"></a>3. crontab格式</h4><p>crontab 的基本格式是：</p><pre class="line-numbers language-none"><code class="language-none">&lt;分钟&gt; &lt;小时&gt; &lt;日&gt; &lt;月份&gt; &lt;星期&gt; &lt;命令&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>crontab文件格式简写：</p><pre class="line-numbers language-none"><code class="language-none">f1 f2 f3 f4 f5 cmd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>分钟</code>(f1) 值从 0 到 59</li><li><code>小时</code>(f2) 值从 0 到 23</li><li><code>日</code>(f3) 值从 1 到 31</li><li><code>月</code>(f4) 值从 1 到 12</li><li><code>星期</code>(f5) 值从 0 到 6, 0 代表星期日</li></ul><p>多个时间可以用逗号隔开，范围可以用连字符给出，星号可以作为通配符。空格用来分开字段。</p><ul><li>当 f1 为 <code>*</code> 时表示每分钟都要执行 cmd，f2 为 <code>*</code> 时表示每小时都要执行程序，依次类推</li><li>当 f1 为 <code>a-b</code> 时表示从第 <code>a</code> 分钟到第 <code>b</code> 分钟这段时间内要执行，f2 为 <code>a-b</code> 时表示从第 <code>a</code> 到第 <code>b</code> 小时都要执行，依次类推</li><li>当 f1 为 <code>*/n</code> 时表示每 <code>n</code> 分钟个时间间隔执行一次，f2 为 <code>*/n</code> 表示每 <code>n </code>小时个时间间隔执行一次，依次类推</li><li>当 f1 为 <code>a, b, c,...</code> 时表示第 <code>a, b, c,...</code> 分钟要执行，f2 为 <code>a, b, c,... </code>时表示第 <code>a, b, c...</code>个小时要执行，依次类推</li><li>使用者也可以将所有的设定先存放在档案 file 中，用 <code>crontab file</code> 的方式来设定时程表。</li></ul><p>p.s.</p><p>当程序在你所指定的时间执行后，系统会寄一封信给你，显示该程序执行的内容，若是你不希望收到这样的信，请在每一行空一格之后加上 <code>&gt; /dev/null 2&gt;&amp;1</code> 即可</p><p>后台运行命令:</p><pre class="line-numbers language-none"><code class="language-none">$ nohup command &gt; /dev/null 2&gt;&amp;1 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-crontab命令"><a href="#4-crontab命令" class="headerlink" title="4. crontab命令"></a>4. crontab命令</h4><p>语法:</p><pre class="line-numbers language-none"><code class="language-none">crontab [-u user] filecrontab [-u user] [ -i ] { -e | -l | -r }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数：</p><pre class="line-numbers language-none"><code class="language-none">-e      (edit user's crontab)-l      (list user's crontab)-r      (delete user's crontab)-i      (prompt before deleting user's crontab)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看crontabs:</p><pre class="line-numbers language-none"><code class="language-none">$ crontab -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑 crontabs:</p><pre class="line-numbers language-none"><code class="language-none">$ crontab -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移除 crontabs:</p><pre class="line-numbers language-none"><code class="language-none">$ crontab -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果用户有一个保存好的 crontab 想要用它完全覆盖旧的 crontab，可以使用：</p><pre class="line-numbers language-none"><code class="language-none">$ crontab saved_crontab_filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中， 上面的<code>saved_crontab_filename</code>指的是已存在的crontab文件</p><h4 id="5-crontab示例"><a href="#5-crontab示例" class="headerlink" title="5. crontab示例"></a>5. crontab示例</h4><p>在每个月的每一天的每一个小时的第一分钟（例如，在12：01，1：01，2：01等）执行命令 <code>/bin/echo Hello, world!</code></p><pre class="line-numbers language-none"><code class="language-none">01 * * * * /bin/echo Hello, world!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将会在一月的每个工作日每五分钟（例如，在12：00，12：05，12：10等）执行一次相同的命令。</p><pre class="line-numbers language-none"><code class="language-none">*/5 * * jan mon-fri /bin/echo Hello, world!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将会在每分钟都执行命令<code>/bin/echo Hello, world!</code></p><pre class="line-numbers language-none"><code class="language-none">* * * * * /bin/echo Hello, world!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每天早上7点执行一次 <code>/bin/ls</code> :</p><pre class="line-numbers language-none"><code class="language-none">0 7 * * * /bin/ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 12 月内, 每天的早上 6 点到 12 点中，每隔3个小时执行一次 <code>/usr/bin/backup</code> :</p><pre class="line-numbers language-none"><code class="language-none">0 6-12/3 * 12 * /usr/bin/backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>周一到周五每天下午 5:00 寄一封信给 <code>i@zhuxiongxian.com</code> :</p><pre class="line-numbers language-none"><code class="language-none">0 17 * * 1-5 mail -s "hi" i@zhuxiongxian.com &lt; /tmp/maildata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 <code>echo "haha"</code></p><pre class="line-numbers language-none"><code class="language-none">20 0-23/2 * * * echo "haha"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 定时任务 </tag>
            
            <tag> 调度 </tag>
            
            <tag> cron </tag>
            
            <tag> crontab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu主题美化</title>
      <link href="2017/10/31/ubuntu-theme-beautify/"/>
      <url>2017/10/31/ubuntu-theme-beautify/</url>
      
        <content type="html"><![CDATA[<h4 id="1-添加资源"><a href="#1-添加资源" class="headerlink" title="1. 添加资源"></a>1. 添加资源</h4><p>添加<code>Unity Tweak Tool</code>， <code>Flatabulous</code>主题和配套图标<code>ultra-flat</code>源：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo add-apt-repository ppa:noobslab/themes$ sudo add-apt-repository ppa:noobslab/icons$ sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-安装Unity-Tweak-Tool"><a href="#2-安装Unity-Tweak-Tool" class="headerlink" title="2. 安装Unity Tweak Tool"></a>2. 安装Unity Tweak Tool</h4><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get install unity-tweak-tool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-安装Flatabulous主题和配套图标"><a href="#3-安装Flatabulous主题和配套图标" class="headerlink" title="3. 安装Flatabulous主题和配套图标"></a>3. 安装Flatabulous主题和配套图标</h4><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get install -y flatabulous-theme$ sudo apt-get install -y ultra-flat-icons<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-应用Flatabulous主题和配套图标"><a href="#4-应用Flatabulous主题和配套图标" class="headerlink" title="4. 应用Flatabulous主题和配套图标"></a>4. 应用Flatabulous主题和配套图标</h4><p>打开<code>Unity Tweak Tool</code>，点击“主题”按钮，选择<code>Flatabulous</code>应用主题，然后点击“图标”标签栏，选择<code>Ultra-flat</code>应用图标。</p><h4 id="5-安装zsh和oh-my-zsh"><a href="#5-安装zsh和oh-my-zsh" class="headerlink" title="5. 安装zsh和oh-my-zsh"></a>5. 安装zsh和oh-my-zsh</h4><p>请阅读<a href="https://zhuxiongxian.cc/2017/09/28/use-oh-my-zsh-instead-of-bash-shell/">使用oh-my-zsh代替bash shell</a></p><p><img src="https://zhuxiongxian.cc/img/bg/ubuntu_beautify.png" alt="ubuntu主题美化"></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 美化 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用oh-my-zsh代替bash shell</title>
      <link href="2017/09/28/use-oh-my-zsh-instead-of-bash-shell/"/>
      <url>2017/09/28/use-oh-my-zsh-instead-of-bash-shell/</url>
      
        <content type="html"><![CDATA[<h4 id="1-zsh和oh-my-zsh安装"><a href="#1-zsh和oh-my-zsh安装" class="headerlink" title="1. zsh和oh-my-zsh安装"></a>1. zsh和oh-my-zsh安装</h4><p>参考链接:</p><p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH">https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH</a></p><p><a href="https://github.com/robbyrussell/oh-my-zsh">https://github.com/robbyrussell/oh-my-zsh</a></p><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get install zsh$ sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"$ chsh -s $(which zsh)$ chsh -s /bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注销并重新启动终端即可.</p><h4 id="2-切换zsh和base-shell"><a href="#2-切换zsh和base-shell" class="headerlink" title="2. 切换zsh和base shell"></a>2. 切换zsh和base shell</h4><p>切换回bash</p><pre class="line-numbers language-none"><code class="language-none">$ chsh -s /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-none"><code class="language-none">$ chsh -s $(which bash)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注销并重新启动终端即可.</p><p>p.s.</p><p>bash与zsh的切换实际在文件/etc/passwd里的<br><code>xx:x:1000:1000:xx:/home/xx:/bin/bash</code>与<br><code>xx:x:1000:1000:xx:/home/xx:/usr/bin/zsh</code>的切换</p><h4 id="3-常见问题解决"><a href="#3-常见问题解决" class="headerlink" title="3. 常见问题解决"></a>3. 常见问题解决</h4><p><code>zsh: command not found: workon</code>解决方法如下:</p><p><code>$ vim .bash_profile</code>:</p><pre class="line-numbers language-none"><code class="language-none">export PATH=/bin:/usr/bin:/usr/local/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>激活<code>virtualenvwrapper</code>, 使<code>workon</code>命令生效:</p><pre class="line-numbers language-none"><code class="language-none">$ source .bash_profile$ echo source ~/.bash_profile &gt;&gt; ~/.zshrc$ echo source /usr/local/bin/virtualenvwrapper.sh &gt;&gt; ~/.zshrc$ source /usr/local/bin/virtualenvwrapper.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 美化 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python安装virtualenv和virtualenvwrapper</title>
      <link href="2017/09/28/python-install-virtualenv-and-virtualenvwrapper/"/>
      <url>2017/09/28/python-install-virtualenv-and-virtualenvwrapper/</url>
      
        <content type="html"><![CDATA[<h4 id="1-pip常用命令"><a href="#1-pip常用命令" class="headerlink" title="1. pip常用命令"></a>1. pip常用命令</h4><p>pip安装命令： pip install package_name</p><p>pip升级命令：pip install –ungrage package_name </p><p>或：pip install -U package_name</p><p>pip卸载命令：pip uninstall package_name</p><p>如<br>pip install django<br>pip install -U django</p><h4 id="2-virtualenv的安装"><a href="#2-virtualenv的安装" class="headerlink" title="2. virtualenv的安装"></a>2. virtualenv的安装</h4><p>virtualenv的安装:</p><pre><code>$ sudo pip install virtualenv</code></pre><p>或</p><pre><code>$ sudo apt-get install python-virtualenv</code></pre><p>如果是Mac OS X 系统， 就可以用easy_install安装virtualenv:</p><pre><code>$ sudo easy_install virtualenv</code></pre><p>查看virtualenv的版本号， 或检查系统是否是否安装了virtualenv: </p><pre><code>$ virtualenv --version</code></pre><p>用virtualenv创建虚拟环境， 一般虚拟环境被命名为venv:</p><pre><code>$ virtualenv venv</code></pre><p>激活这个虚拟环境：</p><pre><code>$ source venv/bin/activate</code></pre><p>如果使用微软windows系统， 激活命令是：</p><pre><code>$ venv\Script\activate</code></pre><p>激活虚拟环境的命令会修改命令行提示符， 加入环境名：</p><pre><code>(venv) $</code></pre><p>当虚拟环境中的工作完成后， 如果你想回到全局Python解释器中， 可以在命令行提示符下输入deactivate<br>执行以下命令可在虚拟环境中安装Flask</p><pre><code>(venv) $ pip install flask</code></pre><p>验证Flask是否正确安装：</p><pre><code>(venv) $ python&gt;&gt;&gt; import flask&gt;&gt;&gt;</code></pre><h4 id="3-virtualenvwrapper的安装"><a href="#3-virtualenvwrapper的安装" class="headerlink" title="3. virtualenvwrapper的安装"></a>3. virtualenvwrapper的安装</h4><p>virtualenvwrapper的安装:</p><pre><code>$ sudo pip install virtualenvwrapper</code></pre><p>安装完成后， 会在下面的位置生成virtualwrapper的shell脚本。</p><pre><code>/usr/local/bin/virtualenvwrapper.sh</code></pre><p>在使用virtualenvwrapper时， 需要配置登录的shell初始化脚本， 将virtualenvwrapper.sh的信息读入当前的shell环境。这里以base为例， 通过对用户根目录下（即/home/[username]）的.bashrc配置文件进入如下修改即可。</p><p>p.s. <code>zsh shell</code>环境的用户， 则相应修改的是/home/[username]的.zshrc配置文件.</p><p>修改.bashrc:</p><pre><code>if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then    export WORKON_HOME=$HOME/.virtualenvs    source /usr/local/bin/virtualenvwrapper.shfi</code></pre><p>再次读入.bashrc:</p><pre><code>$ source ~/.bashrc</code></pre><p>我们可以输入命令mkvirtualenv， 看一下其是否可用。</p><pre><code>$ mkvirtualenv --help</code></pre><p>设置好之后，你就可以通过下面的命令来操作虚拟环境了：</p><p>建立虚拟环境：</p><pre><code>$ mkvirtualenv env</code></pre><p>确认虚拟环境：</p><pre><code>$ ls -la $HOME/.virtualenvs</code></pre><p>与virtualenv的相同处与不同处， 其中， 退出虚拟运行环境的命令同样是deactivate， 进入虚拟运行环境的命令变为workon。<br>退出虚拟环境：</p><pre><code>(venv) $ deactivate</code></pre><p>进入已存在的环境或者切换环境, 假设存在虚拟环境名为env：</p><pre><code>$ workon env</code></pre><p>浏览虚拟环境:</p><pre><code>$ workon</code></pre><p>删除虚拟环境：</p><pre><code>$ rmvirtualenv env</code></pre><h4 id="4-在虚拟环境下一键安装pip常用package"><a href="#4-在虚拟环境下一键安装pip常用package" class="headerlink" title="4. 在虚拟环境下一键安装pip常用package"></a>4. 在虚拟环境下一键安装pip常用package</h4><p>requirements.txt文件里写入<code>package</code>或<code>package==版本号</code>或<code>package&gt;=版本号</code>:</p><pre><code>Django==1.7.7django-debug-toolbarplyMySQL-pythonuwsgiflupFlaskPillowmarkdown2</code></pre><p>一键安装命令:</p><pre><code>(venv) $ pip install -r requirements.txt</code></pre><p>在执行上面的一键安装命令过程中, 配置MySQL-Python的时候系统报错，提示：</p><pre><code>EnvironmentError: mysql_config not found</code></pre><p>google搜索<code>EnvironmentError: mysql_config not found</code>,　在<a href="http://stackoverflow.com/questions/5178292/pip-install-mysql-python-fails-with-environmenterror-mysql-config-not-found">stackoverflow</a>找到答案</p><pre><code>(venv) $ sudo apt-get install libmysqlclient-dev</code></pre><h4 id="5-其他常用的命令"><a href="#5-其他常用的命令" class="headerlink" title="5. 其他常用的命令"></a>5. 其他常用的命令</h4><ul><li>lsvirtualenv: 列出全部的虚拟环境</li><li>showvirtualenv: 列出单个虚拟环境的信息</li><li>rmvirtualenv: 删除一个虚拟环境</li><li>cpvirtualenv: 拷贝虚拟环境</li><li>allvirtualenv: 对当前虚拟环境执行统一的命令。 比如， 要给 venv1 和 venv2 都安装flask, 就可以用<code>allvirtualenv pip install flask</code></li><li>cdvirtualenv: 可以直接切换到虚拟环境的子目录里面</li></ul><blockquote><p>(venv1)&gt; cdvirtualenv bin</p><p>(venv1)&gt; pwd<br>/home/ubuntu/venv/venv1/bin</p></blockquote><ul><li>cdsitepackages: 和cdvirtualenv同理， 切换到虚拟环境的site-packages目录下</li><li>lssitepackages: 列出site-packages目录下的目录</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
            <tag> virtualenv </tag>
            
            <tag> virtualenvwrapper </tag>
            
            <tag> 沙盒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用国内Pypi源加速Pypi包的安装</title>
      <link href="2017/06/30/using-pypi-domestic-sources-to-speed-up-the-installation-of-pypi-packages/"/>
      <url>2017/06/30/using-pypi-domestic-sources-to-speed-up-the-installation-of-pypi-packages/</url>
      
        <content type="html"><![CDATA[<h4 id="1-国内常用的pip源"><a href="#1-国内常用的pip源" class="headerlink" title="1. 国内常用的pip源"></a>1. 国内常用的pip源</h4><ul><li>阿里云pypi源: <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a> (<code>推荐</code>)</li><li>豆瓣pypi源: <a href="http://pypi.douban.com/simple">http://pypi.douban.com/simple</a> (<code>推荐</code>)</li></ul><h4 id="2-设置pip默认源"><a href="#2-设置pip默认源" class="headerlink" title="2. 设置pip默认源"></a>2. 设置pip默认源</h4><pre class="line-numbers language-none"><code class="language-none">$ mkdir ~/.pip$ cd ~/.pip/$ vim pip.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>pip.conf内容如下：</p><p>使用阿里云的pypi源:</p><pre class="line-numbers language-none"><code class="language-none">[global]timeout = 6000index-url = http://mirrors.aliyun.com/pypi/simple/trusted-host = mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>or</p><pre class="line-numbers language-none"><code class="language-none">[global]index-url = https://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用豆瓣的pypi源:</p><pre class="line-numbers language-none"><code class="language-none">[global]index-url = http://pypi.douban.com/simpletrusted-host = pypi.douban.com# disable-pip-version-check = truetimeout = 6000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK, Enjoy it~</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb shell常用命令</title>
      <link href="2017/06/23/mongodb-shell-common-commands/"/>
      <url>2017/06/23/mongodb-shell-common-commands/</url>
      
        <content type="html"><![CDATA[<h4 id="1-进入mongodb-shell"><a href="#1-进入mongodb-shell" class="headerlink" title="1. 进入mongodb shell"></a>1. 进入mongodb shell</h4><pre class="line-numbers language-none"><code class="language-none">$ mongoMongoDB shell version v3.4.4connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.4&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-退出mongodb-shell"><a href="#2-退出mongodb-shell" class="headerlink" title="2. 退出mongodb shell"></a>2. 退出mongodb shell</h4><pre class="line-numbers language-none"><code class="language-none">&gt; exitbye<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-查看mongodb版本号"><a href="#3-查看mongodb版本号" class="headerlink" title="3. 查看mongodb版本号"></a>3. 查看mongodb版本号</h4><pre class="line-numbers language-none"><code class="language-none">&gt; db.version()3.4.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-查看数据库操作命令"><a href="#4-查看数据库操作命令" class="headerlink" title="4. 查看数据库操作命令"></a>4. 查看数据库操作命令</h4><pre class="line-numbers language-none"><code class="language-none">&gt; db.help()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-显示数据库列表"><a href="#5-显示数据库列表" class="headerlink" title="5. 显示数据库列表"></a>5. 显示数据库列表</h4><pre class="line-numbers language-none"><code class="language-none">&gt; show dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-切换或创建数据库"><a href="#6-切换或创建数据库" class="headerlink" title="6. 切换或创建数据库"></a>6. 切换或创建数据库</h4><pre class="line-numbers language-none"><code class="language-none">&gt; use db_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-none"><code class="language-none">&gt; use shakeswitched to db shake<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>p.s. 如果数据库不存在, 则创建数据库, 否则切换到指定数据库.</p><h4 id="7-显示所有用户"><a href="#7-显示所有用户" class="headerlink" title="7. 显示所有用户"></a>7. 显示所有用户</h4><pre class="line-numbers language-none"><code class="language-none">&gt; show users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-显示当前数据库中的集合"><a href="#8-显示当前数据库中的集合" class="headerlink" title="8. 显示当前数据库中的集合"></a>8. 显示当前数据库中的集合</h4><pre class="line-numbers language-none"><code class="language-none">&gt; show collections<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>p.s. 类似关系数据库中的表table</p><h4 id="9-显示集合操作命令"><a href="#9-显示集合操作命令" class="headerlink" title="9. 显示集合操作命令"></a>9. 显示集合操作命令</h4><pre class="line-numbers language-none"><code class="language-none">&gt; db.yourCollection.help()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>p.s. yourCollection是集合名</p><h4 id="10-显示当前所用的数据库"><a href="#10-显示当前所用的数据库" class="headerlink" title="10. 显示当前所用的数据库"></a>10. 显示当前所用的数据库</h4><pre class="line-numbers language-none"><code class="language-none">&gt; db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11-删除已有的字段"><a href="#11-删除已有的字段" class="headerlink" title="11. 删除已有的字段"></a>11. 删除已有的字段</h4><pre class="line-numbers language-none"><code class="language-none">&gt; db.yourcollection.update({},{$unset:{"yourfield":""}},false,true)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>p.s. yourCollection是集合名, yourfield是要删除的字段</p><p>示例:</p><pre class="line-numbers language-none"><code class="language-none">&gt; db.user.update({},{$unset:{"balance":""}},false,true)WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="12-新增字段"><a href="#12-新增字段" class="headerlink" title="12. 新增字段"></a>12. 新增字段</h4><pre class="line-numbers language-none"><code class="language-none">&gt; db.yourcollection.update({}, {$set:{'yourfield': ""}}, {multi:true})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>p.s. yourCollection是集合名, yourfield是要新增的字段</p><p>示例:</p><pre class="line-numbers language-none"><code class="language-none">&gt; db.user.update({}, {$set:{'follower_num_limit': 0}}, {multi:true})WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="13-删除当前数据库"><a href="#13-删除当前数据库" class="headerlink" title="13. 删除当前数据库"></a>13. 删除当前数据库</h4><p>删除当前数据库，默认为 test，你可以使用 db 命令查看当前数据库名。</p><pre class="line-numbers language-none"><code class="language-none">&gt; db.dropDatabase()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后，我们再通过 show dbs 命令数据库是否删除成功：</p><pre class="line-numbers language-none"><code class="language-none">&gt; show dbslocal  0.078GBtest   0.078GB&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="14-插入文档"><a href="#14-插入文档" class="headerlink" title="14. 插入文档"></a>14. 插入文档</h4><p>MongoDB 使用 insert() 或 save() 方法向集合中插入文档, 语法如下:</p><pre class="line-numbers language-none"><code class="language-none">db.COLLECTION_NAME.insert(document)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>插入文档你也可以使用 db.COLLECTION_NAME.save(document) 命令。如果不指定 _id 字段 save() 方法类似于 insert() 方法。如果指定 _id 字段，则会更新该 _id 的数据。</p><p>示例:</p><pre class="line-numbers language-none"><code class="language-none">db.user.insert({"name": "xx", "age"；25, "gender": "male"})WriteResult({ "nInserted" : 1 })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="15-更新文档"><a href="#15-更新文档" class="headerlink" title="15. 更新文档"></a>15. 更新文档</h4><h5 id="15-1-update-方法"><a href="#15-1-update-方法" class="headerlink" title="15.1. update()方法"></a>15.1. update()方法</h5><p>MongoDB 使用 update() 和 save() 方法来更新集合中的文档.<br>update() 方法用于更新已存在的文档。语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">&gt; db.collection.update(    &lt;query&gt;,    &lt;update&gt;,    {        upsert: &lt;boolean&gt;,        multi: &lt;boolean&gt;,        writeConcern: &lt;document&gt;    })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li>query : update的查询条件，类似sql update查询内where后面的。</li><li>update : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的</li><li>upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li><li>multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li><li>writeConcern :可选，抛出异常的级别。</li></ul><p>示例:</p><pre class="line-numbers language-none"><code class="language-none">&gt; db.col.insert({    title: 'MongoDB常用命令',     url: 'https://zhuxiongxian.cc',    tags: ['mongodb', 'database', 'NoSQL']})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着通过 update() 方法来更新标题<code>title</code>:</p><pre class="line-numbers language-none"><code class="language-none">&gt; db.col.update({'title':'MongoDB常用命令'},{$set:{'title':'MongoDB'}})WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上语句只会修改第一条发现的文档，如果你要修改多条相同的文档，则需要设置 multi 参数为 true。</p><pre class="line-numbers language-none"><code class="language-none">&gt; db.col.update({'title':'MongoDB常用命令'},{$set:{'title':'MongoDB'}},{multi:true})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="15-2-save"><a href="#15-2-save" class="headerlink" title="15.2. save()"></a>15.2. save()</h5><p>save() 方法通过传入的文档来替换已有文档。语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">&gt; db.collection.save(   &lt;document&gt;,   {     writeConcern: &lt;document&gt;   })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li>document : 文档数据。</li><li>writeConcern :可选，抛出异常的级别。</li></ul><h5 id="15-3-数据更新操作符"><a href="#15-3-数据更新操作符" class="headerlink" title="15.3. 数据更新操作符"></a>15.3. 数据更新操作符</h5><p><code>$inc</code></p><ul><li>用法：{$inc:{field:value}}</li><li>作用：对一个数字字段的某个field增加value</li></ul><p><code>$set</code></p><ul><li>用法：{$set:{field:value}}</li><li>作用：把文档中某个字段field的值设为value</li></ul><p><code>$unset</code></p><ul><li>用法：{$unset:{field:1}}</li><li>作用：删除某个字段field</li></ul><p><code>$push</code></p><ul><li>用法：{$push:{field:value}}</li><li>作用：把value追加到field里。注：field只能是数组类型，如果field不存在，会自动插入一个数组类型</li></ul><p><code>$pushAll</code></p><ul><li>用法：{$pushAll:{field:value_array}}</li><li>作用：用法同$push一样，只是$pushAll可以一次追加多个值到一个数组字段内。</li></ul><h4 id="16-删除文档"><a href="#16-删除文档" class="headerlink" title="16. 删除文档"></a>16. 删除文档</h4><h4 id="17-查询文档"><a href="#17-查询文档" class="headerlink" title="17. 查询文档"></a>17. 查询文档</h4><p>继续补充…</p>]]></content>
      
      
      <categories>
          
          <category> mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04安装jdk8</title>
      <link href="2017/06/17/Ubuntu1604-install-jdk8/"/>
      <url>2017/06/17/Ubuntu1604-install-jdk8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-jdk8下载"><a href="#1-jdk8下载" class="headerlink" title="1. jdk8下载"></a>1. jdk8下载</h4><p>jdk8下载地址：</p><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>wget命令下载：</p><pre class="line-numbers language-none"><code class="language-none"># wget -c "http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz?AuthParam=1497695563_383d66db9da8433b3436920c19daace9"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件重命名得到<code>jdk-8u131-linux-x64.tar.gz</code>:</p><pre class="line-numbers language-none"><code class="language-none"># mv jdk-8u131-linux-x64.tar.gz?AuthParam=1497695563_383d66db9da8433b3436920c19daace9 jdk-8u131-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-解压缩"><a href="#2-解压缩" class="headerlink" title="2. 解压缩"></a>2. 解压缩</h4><p>解压<code>jdk-8u131-linux-x64.tar.gz</code>得到目录<code>jdk1.8.0_131</code>:</p><pre class="line-numbers language-none"><code class="language-none"># tar -xzvf jdk-8u131-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-指定jdk的安装目录"><a href="#3-指定jdk的安装目录" class="headerlink" title="3. 指定jdk的安装目录"></a>3. 指定jdk的安装目录</h4><p>指定jdk安装目录为<code>/usr/local/java/</code></p><pre class="line-numbers language-none"><code class="language-none"># mkdir -p /usr/local/java/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移动目录<code>jdk1.8.0_131</code>到<code>/usr/local/java/</code>下：</p><pre class="line-numbers language-none"><code class="language-none"># mv jdk1.8.0_131/ /usr/local/java/# cd /usr/local/java/# lsjdk1.8.0_131<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量"></a>4. 配置环境变量</h4><p>修改文件<code>~/.bash_profile</code></p><pre class="line-numbers language-none"><code class="language-none"># vim ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>~/.bash_profile</code>文件内容最后追加:</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/usr/local/java/jdk1.8.0_131export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>:wq</code>保存退出<br>使文件<code>~/.bash_profile</code>重新生效</p><pre class="line-numbers language-none"><code class="language-none"># source ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>p.s.</strong></em> 若终端由<code>/bin/bash</code>改用了<code>/bin/zsh</code>， 则在zsh的配置文件<code>~/.zshrc</code>最后追加上：</p><pre class="line-numbers language-none"><code class="language-none">source ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们把jdk的环境变量的配置信息放在<code>~/.bash_profile</code>这个配置文件中， 这样每次打开终端的时候， zsh就会执行一次环境变量配置信息， 我们就能在终端使用jdk的相关命令了， 如jar, java, javac等 。</p><h4 id="5-检测jdk8是否成功安装"><a href="#5-检测jdk8是否成功安装" class="headerlink" title="5. 检测jdk8是否成功安装"></a>5. 检测jdk8是否成功安装</h4><pre class="line-numbers language-none"><code class="language-none">$ java -versionjava version "1.8.0_131"Java(TM) SE Runtime Environment (build 1.8.0_131-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ok， Enjoy it~</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
            <tag> ubuntu </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04为google chrome安装adobe-flashplugin</title>
      <link href="2017/06/08/Ubuntu1604-install-adobe-flashplugin-for-google-chrome/"/>
      <url>2017/06/08/Ubuntu1604-install-adobe-flashplugin-for-google-chrome/</url>
      
        <content type="html"><![CDATA[<h4 id="1-apt命令安装adobe-flashplugin"><a href="#1-apt命令安装adobe-flashplugin" class="headerlink" title="1. apt命令安装adobe-flashplugin"></a>1. apt命令安装adobe-flashplugin</h4><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get install adobe-flashplugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-deb包安装adobe-flashplugin"><a href="#2-deb包安装adobe-flashplugin" class="headerlink" title="2. deb包安装adobe-flashplugin"></a>2. deb包安装adobe-flashplugin</h4><p>adobe-flashplugin的deb包下载地址:</p><p><a href="http://archive.canonical.com/pool/partner/a/adobe-flashplugin/">http://archive.canonical.com/pool/partner/a/adobe-flashplugin/</a></p><p>首先查看系统版本号:</p><pre class="line-numbers language-none"><code class="language-none">$ uname -aLinux xxpc 4.8.0-52-generic #55~16.04.1-Ubuntu SMP Fri Apr 28 14:36:29 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可知当前ubuntu版本号为<code>16.04.1</code>, 选择<code>adobe-flashplugin_20170509.1-0ubuntu0.16.04.1_amd64.deb</code>进行下载</p><pre class="line-numbers language-none"><code class="language-none">$ wget -c http://archive.canonical.com/pool/partner/a/adobe-flashplugin/adobe-flashplugin_20170509.1-0ubuntu0.16.10.1_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装deb包:</p><pre class="line-numbers language-none"><code class="language-none">$ sudo dpkg -i adobe-flashplugin_20170509.1-0ubuntu0.16.10.1_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若出现以下冲突信息：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo dpkg -i adobe-flashplugin_20170509.1-0ubuntu0.16.10.1_amd64.debSelecting previously unselected package adobe-flashplugin.dpkg: regarding adobe-flashplugin_20170509.1-0ubuntu0.16.10.1_amd64.deb containing adobe-flashplugin: adobe-flashplugin conflicts with flashplugin-installer  flashplugin-installer (version 25.0.0.171ubuntu0.16.04.1) is present and installed.dpkg: error processing archive adobe-flashplugin_20170509.1-0ubuntu0.16.10.1_amd64.deb (--install): conflicting packages - not installing adobe-flashpluginErrors were encountered while processing: adobe-flashplugin_20170509.1-0ubuntu0.16.10.1_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则将<code>flashplugin-installer</code>卸载, 再执行安装<code>adobe-flashplugin</code>命令：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get remove flashplugin-installer$ sudo dpkg -i adobe-flashplugin_20170509.1-0ubuntu0.16.10.1_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后重新打开终端， 输入命令：</p><pre class="line-numbers language-none"><code class="language-none">$ google-chrome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启google chrome浏览器即可生效.</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> google chrome </tag>
            
            <tag> flashpluin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04安装sublime text 3</title>
      <link href="2017/06/05/Ubuntu1604-install-sublimetext3/"/>
      <url>2017/06/05/Ubuntu1604-install-sublimetext3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-安装-卸载sublime-text-3"><a href="#1-安装-卸载sublime-text-3" class="headerlink" title="1. 安装/卸载sublime text 3"></a>1. 安装/卸载sublime text 3</h4><p><code>sublime text 3</code>官方安装教程:<br><a href="https://www.sublimetext.com/docs/3/linux_repositories.html">https://www.sublimetext.com/docs/3/linux_repositories.html</a></p><h5 id="1-1-安装GPG-key"><a href="#1-1-安装GPG-key" class="headerlink" title="1.1. 安装GPG key"></a>1.1. 安装GPG key</h5><pre class="line-numbers language-none"><code class="language-none">$ wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-2-确保apt被设置为与https源一起工作"><a href="#1-2-确保apt被设置为与https源一起工作" class="headerlink" title="1.2. 确保apt被设置为与https源一起工作"></a>1.2. 确保apt被设置为与https源一起工作</h5><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get install apt-transport-https<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-3-选择安装稳定版或开发版APT源"><a href="#1-3-选择安装稳定版或开发版APT源" class="headerlink" title="1.3. 选择安装稳定版或开发版APT源"></a>1.3. 选择安装稳定版或开发版APT源</h5><p><code>稳定版</code></p><pre class="line-numbers language-none"><code class="language-none">$ echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>开发版</code></p><pre class="line-numbers language-none"><code class="language-none">$ echo "deb https://download.sublimetext.com/ apt/dev/" | sudo tee /etc/apt/sources.list.d/sublime-text.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-4-更新APT源并安装sublime-text"><a href="#1-4-更新APT源并安装sublime-text" class="headerlink" title="1.4. 更新APT源并安装sublime text"></a>1.4. 更新APT源并安装sublime text</h5><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get update$ sudo apt-get install sublime-text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>sublime text</code>安装目录为<code>/opt/sublime_text</code>, 在终端启动命令为<code>subl</code></p><h5 id="1-5-卸载sublime-text-3"><a href="#1-5-卸载sublime-text-3" class="headerlink" title="1.5. 卸载sublime text 3"></a>1.5. 卸载sublime text 3</h5><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get remove sublime-text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-使sublime-text支持中文输入法"><a href="#2-使sublime-text支持中文输入法" class="headerlink" title="2. 使sublime text支持中文输入法"></a>2. 使sublime text支持中文输入法</h4><p>安装搜狗输入法 for linux:</p><p><a href="http://pinyin.sogou.com/linux/">http://pinyin.sogou.com/linux/</a></p><p>下载deb包， 使用<code>dpkg -i xxx.deb</code>即可安装.</p><p>克隆项目到本地 :</p><pre class="line-numbers language-none"><code class="language-none">$ git clone https://github.com/lyfeyaj/sublime-text-imfix.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行脚本 :</p><pre class="line-numbers language-none"><code class="language-none">$ cd sublime-text-imfix &amp;&amp; ./sublime-imfix<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成! 重新启动后就可以在 Sublime Text 3 中 使用 Fcitx进行中文输入了.</p><h4 id="3-安装插件管理器Package-Control"><a href="#3-安装插件管理器Package-Control" class="headerlink" title="3. 安装插件管理器Package Control"></a>3. 安装插件管理器Package Control</h4><p>快捷键: ctrl  + `打开 console, 输入以下内容 并回车:</p><pre class="line-numbers language-lang-py" data-language="lang-py"><code class="language-lang-py">import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ',' ')).read())<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启软件后可以在Preference菜单下找到Package Control命令，单击运行Packeage Control，搜索Install Package并进入该选项，此时即可为Sublime Text 3安装所需插件.</p><h4 id="4-sublime-text-3常用插件"><a href="#4-sublime-text-3常用插件" class="headerlink" title="4. sublime text 3常用插件"></a>4. sublime text 3常用插件</h4><p>快捷键 Ctrl+Shift+P（菜单 – Tools – Command Paletter），输入 install 选中Install Package并回车，输入或选择你需要的插件回车就安装了（注意左下角的小文字变化，会提示安装成功）。</p><p>再输入插件名称就可以安装插件, 常用的插件有:</p><pre class="line-numbers language-none"><code class="language-none">Bracket HighlighterSublime CodeIntelDocBlockrgitEmmetjQueryAutoFileNameIMESupportrequirementstxtMarkdown PreviewMarkdownLivePreview         # "markdown_live_preview_on_open": false，改为trueMarkdown Editing     AdvancedNewFile     # "default_root": "project_folder"，改为currentJediPython AutoCompleteSideBarEnhancementsSublimeLinteranacondaAlignment   # 代码对齐， Ctrl+Alt+ACtags   # 函数跳转， Alt+点击 函数名称，会跳转到相应的函数Index XML   # xml格式化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-sublime-text-3安装主题Theme-Brogrammer"><a href="#5-sublime-text-3安装主题Theme-Brogrammer" class="headerlink" title="5. sublime text 3安装主题Theme - Brogrammer"></a>5. sublime text 3安装主题Theme - Brogrammer</h4><p><a href="https://github.com/kenwheeler/brogrammer-theme?files=1">https://github.com/kenwheeler/brogrammer-theme?files=1</a></p><p><code>ctrl + shift + p</code>, install packages<br>Theme is listed as <code>Theme - Brogrammer</code> in Will Bond’s Sublime Package Control.</p><p>效果图如下：</p><p><img src="https://zhuxiongxian.cc/img/Screenshot000002.png" alt="sublime text 3"></p><p>OK， Enjoy it~</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> sublime text </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
